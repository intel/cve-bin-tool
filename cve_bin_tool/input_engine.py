import csv
import json
import os
import sys
from collections import defaultdict
from enum import Enum

from cve_bin_tool.cve_scanner import CVEScanner
from cve_bin_tool.version_scanner import CVEData
from .log import LOGGER


class InvalidCsvError(Exception):
    """ Given File is an Invalid CSV """


class MissingFieldsError(Exception):
    """ Missing needed fields """


class InvalidJsonError(Exception):
    """ Given File is an Invalid JSON """


class Remarks(Enum):
    Mitigated = 1, "1", "Mitigated"
    Unexplored = 2, "2", "Unexplored", ""
    Confirmed = 3, "3", "Confirmed"
    Ignored = 4, "4", "Ignored"

    def __new__(cls, value, *aliases):
        obj = object.__new__(cls)
        obj._value_ = value
        for alias in aliases:
            cls._value2member_map_[alias] = obj
        return obj


class InputEngine:
    def __init__(self, cve_scanner, filename, logger=None):
        self.cve_scanner = cve_scanner
        self.filename = os.path.abspath(filename)
        self.logger = logger or LOGGER.getChild(self.__class__.__name__)
        self.data = defaultdict(list)

        if not os.path.isfile(self.filename):
            self.logger.error(f"File {self.filename} does not exist")
            raise FileNotFoundError(self.filename)

        if self.filename.endswith("csv"):
            self.parse_input = self.input_csv
        if self.filename.endswith("json"):
            self.parse_input = self.input_json

    def input_csv(self):
        with open(self.filename) as csv_file:
            csvdata = csv.DictReader(csv_file)
            if csvdata is None or csvdata.fieldnames is None:
                self.logger.error("Error: invalid CSV")
                raise InvalidCsvError

            required_columns = {"vendor", "product", "version"}
            csv_columns = set(csvdata.fieldnames)
            missing_columns = required_columns - csv_columns
            if missing_columns != set():
                self.logger.error(f"Error: no {missing_columns} columns found")
                raise MissingFieldsError(missing_columns)

            if "remarks" not in csv_columns:
                for row in csvdata:
                    yield dict(
                        vendor=row["vendor"],
                        product=row["product"],
                        version=row["version"],
                        remarks=Remarks.Unexplored,
                    )
                # self.data[Remarks.Unexplored] = list(csvdata)
            else:
                for row in csvdata:
                    # remark = Remarks(row["remarks"])
                    # self.data[remark].append(
                    yield dict(
                        vendor=row["vendor"],
                        product=row["product"],
                        version=row["version"],
                        remarks=Remarks(row["remarks"]),
                    )

    def input_json(self):
        with open(self.filename) as json_file:
            json_data = json.load(json_file)
            if not json_data or not isinstance(json_data, list):
                self.logger.error("Error: invalid JSON")
                raise InvalidJsonError

            required_fields = {"vendor", "product", "version"}
            json_fields = set(json_data[0].keys())
            missing_fields = required_fields - json_fields
            if missing_fields != set():
                self.logger.error(f"Error: no {missing_fields} columns found")
                raise MissingFieldsError(missing_fields)

            if "remarks" not in json_fields:
                for row in json_data:
                    yield dict(
                        vendor=row["vendor"],
                        product=row["product"],
                        version=row["version"],
                        remarks=Remarks.Unexplored,
                    )
                # self.data[Remarks.Unexplored] = list(csvdata)
            else:
                for row in json_data:
                    # remark = Remarks(row["remarks"])
                    # self.data[remark].append(
                    yield dict(
                        vendor=row["vendor"],
                        product=row["product"],
                        version=row["version"],
                        remarks=Remarks(row["remarks"]),
                    )


if __name__ == "__main__":
    args = sys.argv
    with CVEScanner() as c:
        ie = InputEngine(c, args[1])
        for i in ie.parse_input():
            print(i)
