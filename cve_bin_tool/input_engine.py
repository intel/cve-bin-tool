import csv
import json
import os
from logging import Logger
from typing import Dict, Iterable

from .error_handler import (
    InvalidCsvError,
    InvalidJsonError,
    MissingFieldsError,
    ErrorHandler,
    ErrorMode,
)
from .log import LOGGER
from .util import OrderedEnum


class Remarks(OrderedEnum):
    NewFound = 1, "1", "NewFound", "n", "N"
    Unexplored = 2, "2", "Unexplored", "u", "U", ""
    Mitigated = 4, "4", "Mitigated", "m", "M"
    Confirmed = 3, "3", "Confirmed", "c", "C"
    Ignored = 5, "5", "Ignored", "i", "I"

    def __new__(cls, value, *aliases):
        obj = object.__new__(cls)
        obj._value_ = value
        for alias in aliases:
            cls._value2member_map_[alias] = obj
        return obj


class InputEngine:
    parsed_data: Dict[tuple, Remarks]

    def __init__(
        self, filename: str, logger: Logger = None, error_mode=ErrorMode.TruncTrace
    ):
        self.filename = os.path.abspath(filename)
        self.logger = logger or LOGGER.getChild(self.__class__.__name__)
        self.error_mode = error_mode
        self.parsed_data = {}

    def parse_input(self) -> Dict[tuple, Remarks]:
        if not os.path.isfile(self.filename):
            with ErrorHandler(mode=self.error_mode):
                raise FileNotFoundError(self.filename)
        if self.filename.endswith(".csv"):
            self.input_csv()
        elif self.filename.endswith(".json"):
            self.input_json()
        return self.parsed_data

    def input_csv(self) -> None:
        with open(self.filename) as csv_file:
            csvdata = csv.DictReader(csv_file)
            if csvdata is None or csvdata.fieldnames is None:
                with ErrorHandler(mode=self.error_mode):
                    raise InvalidCsvError(self.filename)

            self.parse_data(set(csvdata.fieldnames), csvdata)

    def input_json(self) -> None:
        with open(self.filename) as json_file:
            json_data = json.load(json_file)
            if not json_data or not isinstance(json_data, list):
                with ErrorHandler(mode=self.error_mode):
                    raise InvalidJsonError(self.filename)

            self.parse_data(set(json_data[0].keys()), json_data)

    def parse_data(self, fields: set, data: Iterable) -> None:
        required_fields = {"vendor", "product", "version"}
        missing_fields = required_fields - fields
        if missing_fields != set():
            with ErrorHandler(mode=self.error_mode):
                raise MissingFieldsError(f"{missing_fields} are required fields")

        if "remarks" not in fields:
            for row in data:
                self.parsed_data[
                    (
                        row["vendor"].strip(),
                        row["product"].strip(),
                        row["version"].strip(),
                    )
                ] = Remarks.Unexplored
        else:
            for row in data:
                self.parsed_data[
                    (
                        row["vendor"].strip(),
                        row["product"].strip(),
                        row["version"].strip(),
                    )
                ] = Remarks(row["remarks"].strip())
