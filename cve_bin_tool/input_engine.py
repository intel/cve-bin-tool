import csv
import json
import os
from enum import Enum
from logging import Logger
from typing import Dict, Callable

from .log import LOGGER


class InvalidCsvError(Exception):
    """ Given File is an Invalid CSV """


class MissingFieldsError(Exception):
    """ Missing needed fields """


class InvalidJsonError(Exception):
    """ Given File is an Invalid JSON """


class Remarks(Enum):
    Mitigated = 1, "1", "Mitigated", "m", "M"
    Unexplored = 2, "2", "Unexplored", "u", "U", ""
    Confirmed = 3, "3", "Confirmed", "c", "C"
    Ignored = 4, "4", "Ignored", "i", "I"

    def __new__(cls, value, *aliases):
        obj = object.__new__(cls)
        obj._value_ = value
        for alias in aliases:
            cls._value2member_map_[alias] = obj
        return obj


class InputEngine:
    parsed_data: Dict[tuple, Remarks]
    parse_input: Callable[[], Dict[tuple, Remarks]]

    def __init__(self, filename: str, logger: Logger = None):
        self.filename = os.path.abspath(filename)
        self.logger = logger or LOGGER.getChild(self.__class__.__name__)

        if self.filename.endswith("csv"):
            self.parse_input = self.input_csv
        if self.filename.endswith("json"):
            self.parse_input = self.input_json

        self.parsed_data = {}

    def input_csv(self):
        with open(self.filename) as csv_file:
            csvdata = csv.DictReader(csv_file)
            if csvdata is None or csvdata.fieldnames is None:
                self.logger.error("Error: invalid CSV")
                raise InvalidCsvError

            required_columns = {"vendor", "product", "version"}
            csv_columns = set(csvdata.fieldnames)
            missing_columns = required_columns - csv_columns
            if missing_columns != set():
                self.logger.error(f"Error: no {missing_columns} columns found")
                raise MissingFieldsError(missing_columns)

            if "remarks" not in csv_columns:
                for row in csvdata:
                    self.parsed_data[
                        (
                            row["vendor"].strip(),
                            row["product"].strip(),
                            row["version"].strip(),
                        )
                    ] = Remarks.Unexplored
                # self.data[Remarks.Unexplored] = list(csvdata)
            else:
                for row in csvdata:
                    self.parsed_data[
                        (
                            row["vendor"].strip(),
                            row["product"].strip(),
                            row["version"].strip(),
                        )
                    ] = Remarks(row["remarks"].strip())
        return self.parsed_data

    def input_json(self):
        with open(self.filename) as json_file:
            json_data = json.load(json_file)
            if not json_data or not isinstance(json_data, list):
                self.logger.error("Error: invalid JSON")
                raise InvalidJsonError

            required_fields = {"vendor", "product", "version"}
            json_fields = set(json_data[0].keys())
            missing_fields = required_fields - json_fields
            if missing_fields != set():
                self.logger.error(f"Error: no {missing_fields} columns found")
                raise MissingFieldsError(missing_fields)

            if "remarks" not in json_fields:
                for row in json_data:
                    self.parsed_data[
                        (
                            row["vendor"].strip(),
                            row["product"].strip(),
                            row["version"].strip(),
                        )
                    ] = Remarks.Unexplored
            else:
                for row in json_data:
                    self.parsed_data[
                        (
                            row["vendor"].strip(),
                            row["product"].strip(),
                            row["version"].strip(),
                        )
                    ] = Remarks(row["remarks"].strip())
        return self.parsed_data
