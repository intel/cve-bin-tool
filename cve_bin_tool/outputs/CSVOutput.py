import csv
import os

from cve_bin_tool.outputs.Output import Output


class CSVOutput(Output):
    def __init__(self, filename, modules, logger):
        super().__init__(filename, "csv")
        self.logger = logger
        self.modules = modules

    def create_output(self):
        return self.output_csv()

    def output_cves(self, outfile):

        """ Output a list of CVEs
        format is modules[checker_name][version] = dict{id: severity}
        """
        # if the output is csv we must open a file
        outfile = open(f"{outfile}", "w")

        writer = csv.writer(outfile)
        writer.writerow(["Module Name", "Version", "CVE Number", "Severity"])

        writer = csv.writer(outfile)
        for modulename, versions in self.modules.items():
            for version, cve_list in versions.items():
                for cve_number, cve_severity in cve_list.items():
                    row = [modulename, version, cve_number, cve_severity]
                    writer.writerow(row)

        # We must also close the file
        outfile.close()

    def output_csv(self):

        """ Generate a CSV file for list of CVE """

        # Check if we need to generate a filename
        if self.filename is None:
            self.generate_filename()
        else:
            self.filename = f"{self.filename}.csv"
            # check if the filename already exists
            file_list = os.listdir(os.getcwd())
            if self.filename in file_list:
                self.logger.warning(
                    f"Failed to write at '{self.filename}'. File already exists"
                )
                self.logger.info(
                    "Generating a new filename with Default Naming Convention"
                )
                self.generate_filename()

            # try opening that file
            try:
                with open(self.filename, "w") as f:
                    f.write("testing")
                os.remove(self.filename)
            except Exception as E:
                self.logger.warning(E)
                self.logger.info("Switching Back to Default Naming Convention")
                self.generate_filename()

        # Log the filename generated
        self.logger.info(f"CSV output stored at {os.getcwd()}/{self.filename}")

        # call to output_cves
        self.output_cves(self.filename)
