from json import dump, load
from os.path import exists, expanduser, getmtime, join
from time import time

import distro
import requests

from cve_bin_tool.log import LOGGER
from cve_bin_tool.output_engine.util import format_output

JSON_URL = "https://security-tracker.debian.org/tracker/data/json"
DEB_CVE_JSON_PATH = join(
    expanduser("~"), ".cache", "cve-bin-tool", "debian_cve_data.json"
)

UBUNTU_DEBIAN_MAP = {
    "hirsute": "bullseye",
    "groovy": "bullseye",
    "focal": "bullseye",
    "eoan": "buster",
    "disco": "buster",
    "cosmic": "buster",
    "bionic": "buster",
}


def compute_distro():
    if distro.id() == "ubuntu":
        return UBUNTU_DEBIAN_MAP[distro.codename()]
    elif distro.id() == "debian":
        return distro.codename()


class DebianCVETracker:
    def cve_info(self, all_cve_data):
        """Produces the Backported fixes' info"""

        cve_data = format_output(all_cve_data)
        self.check_json()
        with open(DEB_CVE_JSON_PATH) as jsonfile:
            json_data = load(jsonfile)
            for cve in cve_data:
                try:
                    backported_cve_fix = json_data[cve["product"]][cve["cve_number"]][
                        "releases"
                    ][compute_distro()]
                    if backported_cve_fix[
                        "status"
                    ] == "resolved" and backported_cve_fix["fixed_version"].startswith(
                        cve["version"]
                    ):
                        LOGGER.info(
                            f'{cve["product"]}: {cve["cve_number"]} has backported fix in v{backported_cve_fix["fixed_version"]} release.'
                        )
                    else:
                        LOGGER.info(
                            f'{cve["product"]}: No known backported fix for {cve["cve_number"]}.'
                        )
                except KeyError:
                    if cve["cve_number"] != "UNKNOWN":
                        LOGGER.info(
                            f'{cve["product"]}: No known backported fix for {cve["cve_number"]}.'
                        )

    def check_json(self):
        """Check to update the Debian CVE JSON file"""

        if (
            not exists(DEB_CVE_JSON_PATH)
            or getmtime(DEB_CVE_JSON_PATH) + (24 * 60 * 60) < time()
        ):
            self.update_json()

    def update_json(self):
        """Update the Debian CVE JSON file"""

        LOGGER.info("Updating Debian CVE JSON file for checking backported fixes.")
        response = requests.get(JSON_URL).json()
        with open(DEB_CVE_JSON_PATH, "w") as debian_json:
            dump(response, debian_json, indent=4)
            LOGGER.info(
                "Debian CVE JSON file for checking backported fixes is updated."
            )
