# Copyright (C) 2021 Intel Corporation
# SPDX-License-Identifier: GPL-3.0-or-later

import os

from cve_bin_tool.cvedb import CVEDB, DBNAME, DISK_LOCATION_DEFAULT
from cve_bin_tool.extractor import Extractor
from cve_bin_tool.log import LOGGER


class HelperScript:
    """Helps Contributors to understand how various common filenames, version-strings, etc. look"""

    dbname = os.path.join(DISK_LOCATION_DEFAULT, DBNAME)

    def __init__(self, filename, vendor_name=None, product_name=None):
        self.extractor = Extractor()
        self.logger = LOGGER.getChild(self.__class__.__name__)
        self.product = product_name or self.parse_filename(filename)
        self.vendor = vendor_name

        # for setting the data
        self.connection = None
        self.dbpath = os.path.join(DISK_LOCATION_DEFAULT, DBNAME)

    def extract_file(self, filename):
        pass

    def search_pattern(self):
        pass

    def parse_filename(self, filename):
        """
        returns package_name/product_name from package_filename of types .rpm, .deb, etc.
        Example: package_filename = openssh-client_8.4p1-5ubuntu1_amd64.deb
            here, package_name = openssh-client
        """

        if filename.endswith(".tar.xz"):
            product_name = filename.rsplit("-", 3)[0]
            # example: libarchive-3.5.1-1-aarch64.pkg.tar.xz
        elif filename.endswith(".deb") or filename.endswith(".ipk"):
            product_name = filename.rsplit("_")[0]
        else:
            product_name = filename.rsplit("-", 2)[0]

        # self.logger.debug(f"The product name is {product_name}")
        return product_name

    def find_vendor_product(self):

        CVEDB.db_open(self)
        cursor = self.connection.cursor()

        # finding out all distinct (vendor, product) pairs with the help of product_name
        query = f"""
            SELECT distinct vendor, product FROM cve_range
            WHERE product=(:product);
        """

        cursor.execute(query, {"product": self.product})
        data = cursor.fetchall()

        # checking if (vendor, product) was found in the database
        if data:
            if len(data) != 1:
                # finding out (vendor, product) pair, when vendor_name is given
                if self.vendor:
                    query = f"""
                        SELECT distinct vendor, product FROM cve_range
                        WHERE vendor=(:vendor) AND product=(:product);
                    """

                    cursor.execute(
                        query, {"vendor": self.vendor, "product": self.product}
                    )
                    data = cursor.fetchall()
                # warning the user to specify vendor_name for accurate results
                ### todo: add warning message when vendor_name is wrong (due to typo)
                else:
                    self.logger.warning(
                        f"""Multiple (vendor, product) pairs found.
                        \nPlease try specifying the "vendor_name" for accurate reseults.
                        """
                    )
            return data  # [('vendor', 'product')]
        else:
            self.logger.warning(
                f"""No match was found for "{self.product}" in database. 
                \nPlease check your file or try specifying the "product_name" also.
                """
            )

        CVEDB.db_close(self)

    def output(self):
        pass
