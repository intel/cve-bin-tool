# Copyright (C) 2021 Intel Corporation
# SPDX-License-Identifier: GPL-3.0-or-later

import os
import sqlite3

from cve_bin_tool.cvedb import DBNAME, DISK_LOCATION_DEFAULT
from cve_bin_tool.extractor import Extractor


class HelperScript:
    """Helps Contributors to understand how various common filenames, version-strings, etc. look"""

    dbname = os.path.join(DISK_LOCATION_DEFAULT, DBNAME)

    def __init__(self, filename):
        self.extractor = Extractor()
        self.product = filename.split("-")[0]

    def extract_file(self, filename):
        pass

    def search_pattern(self):
        pass

    def find_vendor_product(self):

        # finding out all distinct (vendor, product) pairs with the help of product_name
        query = f"""
            SELECT distinct vendor, product FROM cve_range
            WHERE product=(:product);
        """

        self.cursor.execute(query, {"product": self.product})
        data = self.cursor.fetchall()

        different_vendors = [vendor for vendor, product in data]

        # checking if (vendor, product) was found in the database
        if data:
            if len(data) != 1:
                # returning (vendor, product) if product_name is a subset of vendor_name
                for vendor, product in data:
                    if self.product in vendor:
                        return [(vendor, product)]
                # returning (vendor, product) based the number of appearance of that vendor_name in databse
                vendor_count = {}
                for vendor in different_vendors:
                    vendor_count[vendor] = self.find_vendor_product_by_count(vendor)
                return [(max(vendor_count, key=vendor_count.get), self.product)]

            return data
        else:
            print("no hit")

    def find_vendor_product_by_count(self, vendor):

        # finding out all (vendor, product) pairs with the help of product_name
        query = f"""
            SELECT vendor, product FROM cve_range
            WHERE product=(:product);
        """

        self.cursor.execute(query, {"product": self.product})
        data = self.cursor.fetchall()

        # counting the appearance of that vendor_name in database
        count = 0
        for v, p in data:
            if vendor == v:
                count += 1

        return count

    def output(self):
        pass

    def __enter__(self):
        self.connection = sqlite3.connect(self.dbname)
        self.cursor = self.connection.cursor()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.connection.close()
