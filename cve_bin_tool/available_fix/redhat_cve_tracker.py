# Copyright (C) 2021 Intel Corporation
# SPDX-License-Identifier: GPL-3.0-or-later

from json import loads
from urllib import error, request

from cve_bin_tool.log import LOGGER
from cve_bin_tool.output_engine.util import format_output

RH_CVE_API = "https://access.redhat.com/hydra/rest/securitydata/cve"


class RedhatCVETracker:
    def __init__(self, distro_name, distro_codename):
        self.distro_name = distro_name
        self.distro_codename = distro_codename

    def cve_info(
        self,
        all_cve_data,
    ):
        """Produces the available fixes' info"""

        cve_data = format_output(all_cve_data)
        for cve in cve_data:
            if cve["cve_number"] != "UNKNOWN":
                json_data = self.get_data(cve["cve_number"], cve["product"])
                try:
                    package_state = json_data["package_state"]
                    for package in package_state:
                        output = (
                            f'{cve["product"]}: No known fix for {cve["cve_number"]}.'
                        )
                        if (
                            package["product_name"]
                            == f"Red Hat Enterprise Linux {self.distro_codename}"
                        ):
                            output = f'{cve["product"]}: {cve["cve_number"]} - Status: {package["fix_state"]}'
                            if (
                                package["fix_state"] == "Affected"
                                and "upstream_fix" in json_data
                            ):
                                output += f' Fixed release: {json_data["upstream_fix"]}'
                            break
                    LOGGER.info(output)
                except (KeyError, TypeError):
                    if cve["cve_number"] != "UNKNOWN":
                        LOGGER.info(
                            f'{cve["product"]}: No known fix for {cve["cve_number"]}.'
                        )

    def get_data(self, cve_number, product):
        try:
            full_query = f"{RH_CVE_API}/{cve_number}.json"
            response = request.urlopen(full_query).read().decode("utf-8")
            return loads(response)
        except error.HTTPError:
            LOGGER.info(f"{product}: No known fix for {cve_number}.")
