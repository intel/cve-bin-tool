#!/usr/bin/python3
from __future__ import print_function

import argparse
import csv
import sys

from .cvedb import CVEDB
from .log import LOGGER

ERR_BADCSV = -1
ERR_MISSINGCOLUMN = -2


def main(argv=None, outfile=None):
    """ Take a list of package information + versions from a CSV file,
    and output a list of matching CVES """

    if argv is None:
        argv = sys.argv

    if outfile is None:
        outfile = sys.stdout

    parser = argparse.ArgumentParser(
        prog="csv2cve",
        description="This tool takes a list of software + versions from a CSV file and outputs a list of CVEs known to affect those versions",
    )
    parser.add_argument(
        "csv_file",
        action="store",
        help="CSV file with package data. Must contain vendor,package,version, where vendor and package match entries in the National Vulnerability Database.",
    )

    if len(argv) <= 1:
        parser.print_help()
        return 0

    args = parser.parse_args(argv[1:])

    csv2cve(args.csv_file)


def csv2cve(filename):
    # Parse the csv file
    LOGGER.debug(f"opening file: {filename}")
    cveoutput = []

    with open(filename) as csvfile:
        csvdata = csv.DictReader(csvfile, delimiter=",")  # "," is default anyhow

        if csvdata is None or csvdata.fieldnames is None:
            LOGGER.error("Error: invalid CSV")
            return ERR_BADCSV

        required_columns = ["vendor", "package", "version"]
        for column in required_columns:
            if column not in csvdata.fieldnames:
                LOGGER.error(f"Error: no {column} column found")
                return ERR_MISSINGCOLUMN

        # Initialize the NVD database
        cvedb = CVEDB()
        cvedb.get_cvelist_if_stale()

        # Go row by row and look for CVEs
        for row in csvdata:
            LOGGER.info(
                f'CVES for {row["vendor"]} {row["package"]}, version {row["version"]}'
            )
            cves = cvedb.get_cves(row["vendor"], row["package"], row["version"])
            if cves:
                LOGGER.info("\n".join(sorted(cves.keys())))
                cveoutput.append(cves.keys())
            else:
                LOGGER.debug("No CVEs found. Is the vendor/package info correct?")
            LOGGER.debug("")

        # close down the NVD database
        cvedb.close()
        return cveoutput


if __name__ == "__main__":
    sys.exit(main())
