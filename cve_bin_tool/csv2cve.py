# Copyright (C) 2021 Intel Corporation
# SPDX-License-Identifier: GPL-3.0-or-later

from __future__ import annotations

import logging
import os
import sys

from cve_bin_tool import cli
from cve_bin_tool.error_handler import ErrorHandler, InsufficientArgs, excepthook
from cve_bin_tool.log import LOGGER

# Set the system exception hook to our custom handler
sys.excepthook = excepthook

def main(argv: list[str] | None = None):
    """
    The main function for the CSV2CVE tool.
    This function takes a list of arguments, validates them, and then runs the main 
    function of the CVE Binary Tool CLI.

    Parameters:
    argv (list[str] | None): The list of arguments to process. If None, sys.argv is used.

    Raises:
    InsufficientArgs: If no CSV file is provided in the arguments.

    Returns:
    The return value of cli.main, or None if an InsufficientArgs exception is raised.
    """
    
    # Check Python version
    if sys.version_info < (3, 8):
        raise OSError(
            "Python no longer provides security updates for version 3.7 as of June 2023. Please upgrade to python 3.8+ to use CVE Binary Tool."
        )
    logger: logging.Logger = LOGGER.getChild("CSV2CVE")
    argv = argv or sys.argv

    # Check if CSV file is provided
    if len(argv) < 2:
        with ErrorHandler(logger=logger):
            raise InsufficientArgs("csv file required")
    flag: bool = False

    # Process CSV file argument
    for idx, arg in enumerate(argv):
        if arg.endswith(".csv"):
            argv[idx] = f"-i={arg}"
            flag = True

    # Run CVE Binary Tool CLI if CSV file is provided
    if flag:
        return cli.main(argv)
    else:
        with ErrorHandler(logger=logger):
            raise InsufficientArgs("csv file required")


if __name__ == "__main__":
    # Check if NO_EXIT_CVE_NUM environment variable is set
    if os.getenv("NO_EXIT_CVE_NUM"):
        main()
    else:
        # Exit with the return value of main
        sys.exit(main())