#!/usr/bin/python3
import argparse
import csv
import sys

from .cli import Scanner
from .NVDAutoUpdate import NVDSQLite


def main(argv=sys.argv, outfile=sys.stdout):
    """ Take a list of package information + versions from a CSV file,
    and output a list of matching CVES """

    parser = argparse.ArgumentParser(
        prog="csv2cve",
        description="This tool takes a list of software + versions from a CSV file and outputs a list of CVEs known to affect those versions",
    )
    parser.add_argument(
        "csv file",
        help="CSV file with package data. Must contain vendor,package,version, where vendor and package match entries in the National Vulnerability Database.",
    )

    if len(argv) <= 1:
        parser.print_help()
        return 0

    # Parse the csv file
    print("opening file: {}".format(argv[1]))

    with open(argv[1]) as csvfile:
        csvdata = csv.DictReader(csvfile, delimiter=",")  # "," is default anyhow

        # Initialize the NVD database
        nvd = NVDSQLite()
        nvd.get_cvelist_if_stale()
        nvd.open()

        # Initialize the scanner
        scanner = Scanner(nvd)

        # Go row by row and look for CVEs
        for row in csvdata:
            print(
                "CVES for {} {}, version {}".format(
                    row["vendor"], row["package"], row["version"]
                )
            )
            vpkg_pair = [[row["vendor"], row["package"]]]
            cves = scanner.get_cves(vpkg_pair, row["version"])
            if cves:
                print("\n".join(sorted(cves.keys())))
            else:
                print("No CVEs found. Is the vendor/package info correct?")
            print("")

    # close down the NVD database
    nvd.close()


if __name__ == "__main__":
    sys.exit(main())
