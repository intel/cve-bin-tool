# Copyright (C) 2022 Anthony Harrison
# SPDX-License-Identifier: GPL-3.0-or-later

import logging
from pathlib import Path

from cve_bin_tool.log import LOGGER

# This downgrades a message during module loading.
if True:  # Strange construction for pep8 compliance.
    logging.getLogger("xmlschema").setLevel(logging.WARNING)
    import xmlschema


def _validate_xml(filename, xsd_file):
    """
    This function validates an XML file against a given XML Schema Definition (XSD) file.
    
    Parameters:
    filename (str): The path to the XML file to be validated.
    xsd_file (str): The name of the XSD file against which the XML file will be validated.

    Returns:
    bool: True if the XML file is valid according to the XSD file, False otherwise.
    """
    # Resolve folder where schemas are present
    schemas_file = Path(__file__).resolve().parent / "schemas" / xsd_file
    the_schema = xmlschema.XMLSchema(Path(schemas_file))

    LOGGER.debug(f"Validate {filename} against the_schema in {schemas_file}")
    try:
        result = the_schema.validate(filename)
    except Exception as e:
        LOGGER.debug(f"Failed to validate {filename} against {xsd_file}. Exception {e}")
        result = "Fail"
    return result is None


def validate_spdx(filename):
    """
    This function validates an SPDX document against the SPDX XSD schema.
    
    Parameters:
    filename (str): The path to the SPDX document to be validated.

    Returns:
    bool: True if the SPDX document is valid, False otherwise.
    """
    SPDX_SCHEMA = "spdx.xsd"
    return _validate_xml(filename, SPDX_SCHEMA)


def validate_cyclonedx(filename):
    """
    This function validates a CycloneDX document against the CycloneDX XSD schema.
    
    Parameters:
    filename (str): The path to the CycloneDX document to be validated.

    Returns:
    bool: True if the CycloneDX document is valid, False otherwise.
    """
    CYCLONEDX_SCHEMA = "cyclonedx_gen.xsd"
    return _validate_xml(filename, CYCLONEDX_SCHEMA)


def validate_swid(filename):
    """
    This function validates a SWID tag against the SWID XSD schema.
    
    Parameters:
    filename (str): The path to the SWID tag to be validated.

    Returns:
    bool: True if the SWID tag is valid, False otherwise.
    """
    SWID_SCHEMA = "swid_gen.xsd"
    return _validate_xml(filename, SWID_SCHEMA)


def validate_pom(filename):
    """
    This function validates a POM (Project Object Model) file against the POM XSD schema.
    
    Parameters:
    filename (str): The path to the POM file to be validated.

    Returns:
    bool: True if the POM file is valid, False otherwise.
    """
    POM_SCHEMA = "pom.xsd"
    return _validate_xml(filename, POM_SCHEMA)