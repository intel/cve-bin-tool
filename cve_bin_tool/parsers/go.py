# Copyright (C) 2022 Intel Corporation
# SPDX-License-Identifier: GPL-3.0-or-later

import re

from cve_bin_tool.parsers import Parser


class GoParser(Parser):
    """
    Parser implementation for Go module files (go.mod).

    This parser is designed to parse Go module files and generate Package URL (PURL) strings
    based on the modules and their dependencies listed in the file.

    Attributes:
        cve_db (CVEDB): The CVE database instance used for vulnerability information.
        logger (Logger): The logger instance for logging messages and debugging information.

    Methods:
        generate_purl(product, version, vendor):
            Generate a PURL string based on the provided product, version, and vendor information.
        is_valid_purl(purl_string):
            Check if the given PURL string is valid according to the specified PURL format.
        run_checker(filename):
            Parse the Go module file and yield valid PURLs for the modules listed in the file.

    """

    def __init__(self, cve_db, logger):
        super().__init__(cve_db, logger)

    def generate_purl(self, product, version, vendor):
        """Generate purl string based on product, version and vendor."""
        purl = f"pkg:golang/{vendor}/{product}@{version}"
        if self.is_valid_purl(purl):
            return purl

    def is_valid_purl(self, purl_string):
        """Returns true if the given purl_string is a valid PURL string"""
        pieces = purl_string.split("/")
        for piece in pieces:
            if not re.match(
                r"^[\w\-.]+(?:\?[\w\-.]+=[\w\-.]+(?:&[\w\-.]+=[\w\-.]+)*)?$", piece
            ):
                return False
        return True

    def run_checker(self, filename):
        """Parse the file and yield valid PURLs."""
        self.filename = filename
        with open(self.filename) as fh:
            lines = fh.readlines()
            packages = False
            for line in lines:
                # A go.mod file has requirements that look like this:
                # require (
                #     github.com/davecgh/go-spew v1.1.1
                #     github.com/evanphx/json-patch v4.12.0+incompatible
                # )
                line = line.strip()
                if line == "require (":
                    packages = True
                    continue
                if line == ")":
                    packages = False
                    continue
                if packages:
                    parts = line.split(" ")
                    if len(parts) >= 2:
                        product = line.split(" ")[0].split("/")[-1]
                        version = line.split(" ")[1][1:].split("-")[0].split("+")[0]
                        vendor = self.find_vendor(product, version)
                        if vendor is not None:
                            self.generate_purl(product, version, vendor)
                            yield from vendor
            self.logger.debug(f"Done scanning file: {self.filename}")
