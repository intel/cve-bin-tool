#!/usr/bin/python3

"""
CVE checker for sqlite

References:
SQLLite version/sha1 data from https://www.sqlite.org/changes.html

CVE list: https://www.cvedetails.com/vulnerability-list/vendor_id-9237/product_id-16355/Sqlite-Sqlite.html

"""
try:
    from urllib import urlopen
    import urllib.error as error
except ImportError:
    from urllib2 import urlopen
    import urllib as error
import re

# FIXME: We could do this every time but should cache it somehow.
# For initial testing, I'm running once and keeping a data structure
# version_map = get_version_map()
VERSION_MAP = [
    ["3.26.0", "2018-12-01 12:34:55 bf8c1b2b7a5960c282e543b9c293686dccff272512d08865f4600fb58238b4f9"],
    ["3.25.3", "2018-11-05 20:37:38 89e099fbe5e13c33e683bef07361231ca525b88f7907be7092058007b75036f2"],
    ["3.25.2", "2018-09-25 19:08:10 fb90e7189ae6d62e77ba3a308ca5d683f90bbe633cf681865365b8e92792d1c7"],
    ["3.25.1", "2018-09-18 20:20:44 2ac9003de44da7dafa3fbb1915ac5725a9275c86bf2f3b7aa19321bf1460b386"],
    ["3.25.0", "2018-09-15 04:01:47 b63af6c3bd33152742648d5d2e8dc5d5fcbcdd27df409272b6aea00a6f761760"],
    ["3.24.0", "2018-06-04 19:24:41 c7ee0833225bfd8c5ec2f9bf62b97c4e04d03bd9566366d5221ac8fb199a87ca"],
    ["3.23.1", "2018-04-10 17:39:29 4bb2294022060e61de7da5c227a69ccd846ba330e31626ebcd59a94efd148b3b"],
    ["3.23.0", "2018-04-02 11:04:16 736b53f57f70b23172c30880186dce7ad9baa3b74e3838cae5847cffb98f5cd2"],
    ["3.22.0", "2018-01-22 18:45:57 0c55d179733b46d8d0ba4d88e01a25e10677046ee3da1d5b1581e86726f2171d"],
    ["3.21.0", "2017-10-24 18:55:49 1a584e499906b5c87ec7d43d4abce641fdf017c42125b083109bc77c4de48827"],
    ["3.20.1", "2017-08-24 16:21:36 8d3a7ea6c5690d6b7c3767558f4f01b511c55463e3f9e64506801fe9b74dce34"],
    ["3.20.0", "2017-08-01 13:24:15 9501e22dfeebdcefa783575e47c60b514d7c2e0cad73b2a496c0bc4b680900a8"],
    ["3.18.2", "2017-06-17 09:59:36 036ebf729e4b21035d7f4f8e35a6f705e6bf99887889e2dc14ebf2242e7930dd"],
    ["3.18.1", "2017-06-16 13:41:15 77bb46233db03a3338bacf7e56f439be3dfd1926ea0c44d252eeafa7a7b31c06"],
    ["3.19.3", "2017-06-08 14:26:16 0ee482a1e0eae22e08edc8978c9733a96603d4509645f348ebf55b579e89636b"],
    ["3.19.2", "2017-05-25 16:50:27 edb4e819b0c058c7d74d27ebd14cc5ceb2bad6a6144a486a970182b7afe3f8b9"],
    ["3.19.1", "2017-05-24 13:08:33 f6d7b988f40217821a382bc298180e9e6794f3ed79a83c6ef5cae048989b3f86"],
    ["3.19.0", "2017-05-22 13:58:13 28a94eb282822cad1d1420f2dad6bf65e4b8b9062eda4a0b9ee8270b2c608e40"],
    ["3.18.0", "2017-03-28 18:48:43 424a0d380332858ee55bdebc4af3789f74e70a2b3ba1cf29d84b9b4bcf3e2e37"],
    ["3.17.0", "2017-02-13 16:02:40 ada05cfa86ad7f5645450ac7a2a21c9aa6e57d2c"],
    ["3.16.2", "2017-01-06 16:32:41 a65a62893ca8319e89e48b8a38cf8a59c69a8209"],
    ["3.16.1", "2017-01-03 18:27:03 979f04392853b8053817a3eea2fc679947b437fd"],
    ["3.16.0", "2017-01-02 11:57:58 04ac0b75b1716541b2b97704f4809cb7ef19cccf"],
    ["3.15.2", "2016-11-28 19:13:37 bbd85d235f7037c6a033a9690534391ffeacecc8"],
    ["3.15.1", "2016-11-04 12:08:49 1136863c76576110e710dd5d69ab6bf347c65e36"],
    ["3.15.0", "2016-10-14 10:20:30 707875582fcba352b4906a595ad89198d84711d8"],
    ["3.14.2", "2016-09-12 18:50:49 29dbef4b8585f753861a36d6dd102ca634197bd6"],
    ["3.14.1", "2016-08-11 18:53:32 a12d8059770df4bca59e321c266410344242bf7b"],
    ["3.14", "2016-08-08 13:40:27 d5e98057028abcf7217d0d2b2e29bbbcdf09d6de"],
    ["3.13.0", "2016-05-18 10:57:30 fc49f556e48970561d7ab6a2f24fdd7d9eb81ff2"],
    ["3.12.2", "2016-04-18 17:30:31 92dc59fd5ad66f646666042eb04195e3a61a9e8e"],
    ["3.12.1", "2016-04-08 15:09:49 fe7d3b75fe1bde41511b323925af8ae1b910bc4d"],
    ["3.12.0", "2016-03-29 10:14:15 e9bb4cf40f4971974a74468ef922bdee481c988b"],
    ["3.11.1", "2016-03-03 16:17:53 f047920ce16971e573bc6ec9a48b118c9de2b3a7"],
    ["3.11.0", "2016-02-15 17:29:24 3d862f207e3adc00f78066799ac5a8c282430a5f"],
    ["3.10.2", "2016-01-20 15:27:19 17efb4209f97fb4971656086b138599a91a75ff9"],
    ["3.10.1", "2016-01-13 21:41:56 254419c36766225ca542ae873ed38255e3fb8588"],
    ["3.10.0", "2016-01-06 11:01:07 fd0a50f0797d154fefff724624f00548b5320566"],
    ["3.9.2", "2015-11-02 18:31:45 bda77dda9697c463c3d0704014d51627fceee328"],
    ["3.9.0", "2015-10-14 12:29:53 a721fc0d89495518fe5612e2e3bbc60befd2e90d"],
    ["3.9.0", "2015-07-29 20:00:57 cf538e2783e468bbc25e7cb2a9ee64d3e0e80b2f"],
    ["3.9.0", "2015-07-27 13:49:41 b8e92227a469de677a66da62e4361f099c0b79d0"],
    ["3.9.0", "2015-05-20 18:17:19 2ef4f3a5b1d1d0c4338f8243d40a2452cc1f7fe4"],
    ["3.9.0", "2015-05-09 12:14:55 05b4b1f2a937c06c90db70c09890038f6c98ec40"],
    ["3.9.0", "2015-05-07 11:53:08 cf975957b9ae671f34bb65f049acf351e650d437"],
    ["3.8.9", "2015-04-08 12:16:33 8a8ffc862e96f57aa698f93de10dee28e69f6e09"],
    ["3.8.9", "2015-02-25 13:29:11 9d6c1880fb75660bbabd693175579529785f8a6b"],
    ["3.8.9", "2015-01-30 14:30:45 7757fc721220e136620a89c9d28247f28bbbc098"],
    ["3.8.9", "2015-01-20 16:51:25 f73337e3e289915a76ca96e7a05a1a8d4e890d55"],
    ["3.8.8", "2015-01-16 12:08:06 7d68a42face3ab14ed88407d4331872f5b243fdf"],
    ["3.8.8", "2014-12-09 01:34:36 f66f7a17b78ba617acde90fc810107f34f1a1f2e"],
    ["3.8.8", "2014-12-05 22:29:24 647e77e853e81a5effeb4c33477910400a67ba86"],
    ["3.8.8", "2014-11-18 20:57:56 2ab564bf9655b7c7b97ab85cafc8a48329b27f93"],
    ["3.8.8", "2014-10-29 13:59:56 3b7b72c4685aa5cf5e675c2c47ebec10d9704221"],
    ["3.8.7", "2014-10-17 11:24:17 e4ab094f8afce0817f4074e823fabe59fc29ebb4"],
    ["3.8.6", "2014-08-15 11:46:33 9491ba7d738528f168657adb43a198238abde19e"],
    ["3.8.5", "2014-06-04 14:06:34 b1ed4f2a34ba66c29b130f8d13e9092758019212"],
    ["3.8.5", "2014-04-03 16:53:12 a611fa96c4a848614efe899130359c9f6fb889c3"],
    ["3.8.5", "2014-03-26 18:51:19 02ea166372bdb2ef9d8dfbb05e78a97609673a8e"],
    ["3.8.5", "2014-03-11 15:27:36 018d317b1257ce68a92908b05c9c7cf1494050d0"],
    ["3.8.4", "2014-03-10 12:20:37 530a1ee7dc2435f80960ce4710a3c2d2bfaaccc5"],
    ["3.8.4", "2014-02-11 14:52:19 ea3317a4803d71d88183b29f1d3086f46d68a00e"],
]

def guess_version(lines):
    """Guesses the sqlite version from the file contents.

    The most correct way to do this is to search for the sha1 sums per release.
    """

    for line in lines:
        for mapping in VERSION_MAP:
            if mapping[1] in line:
                return mapping[0]

    return "UNKNOWN"

def guess_contains(lines):
    """Tries to determine if a file includes sqlite
    """
    # since the version strings are super unique here, we can guess the version
    # at the same time
    for line in lines:
        for mapping in VERSION_MAP:
            if mapping[1] in line:
                return mapping[0]

    # If that fails, find a signature that might indicate presence of sqlite
    signatures = [
        "unable to open a temporary database file for storing temporary tables",
        "json_object() requires an even number of arguments",
        "ESCAPE expression must be a single character",
    ]
    for line in lines:
        for signature in signatures:
            if signature in line:
                return 1

    return 0

def get_version(lines, filename):
    """returns version information for libnss as found in a given file.
    The version info is returned as a tuple:
        [modulename, is_or_contains, version]

    VPkg: sqlite, sqlite
    """
    version_info = dict()
    if "sqlite" in filename or "sqlite3" in filename:
        version_info["is_or_contains"] = "is"
        version_info["version"] = guess_version(lines)

    else:
        version = guess_contains(lines)
        if version:
            version_info["is_or_contains"] = "contains"
            version_info["version"] = version

    if "is_or_contains" in version_info:
        version_info["modulename"] = "sqlite"

    return version_info

def get_version_map():
    """ Read changelog and get SQLITE_SOURCE_ID to use for versions """
    version_map = []

    changeurl = "https://www.sqlite.org/changes.html"
    try:
        response = urlopen(changeurl)
    except error.URLError as err:
        print("Could not fetch " + changeurl + ", " + err)
    lines = response.readlines()

    version_pattern = re.compile(r'<h3>\d{4}-\d{2}-\d{2} \((\d+\.\d+\.?\d?)\)</h3>')
    id_pattern = re.compile(r'SQLITE_SOURCE_ID: "([^"]+)"')

    last_version = "UNKNOWN"
    for line_encoded in lines:
        line = line_encoded.decode("UTF-8")

        ver_match = version_pattern.search(line)
        if ver_match:
            last_version = ver_match.group(1)
        id_match = id_pattern.search(line)
        if id_match:
            version_map.append([last_version, id_match.group(1)])
            print('        [\"' + last_version + '", "' + id_match.group(1) + '"],')

    return version_map

if __name__ == '__main__':
    get_version_map()
