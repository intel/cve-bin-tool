#!/usr/bin/env python3
"""
CVE checker for Bluez
References:
https://www.cvedetails.com/vulnerability-list/vendor_id-8316/product_id-35116/Bluez-Bluez.html

"""
from . import Checker
from re import search


class BluezChecker(Checker):
    CONTAINS_PATTERNS = [
        r"org.bluez.Adapter1",
        r"org.bluez.AgentManager1",
        r"org.bluez.GattService1",
        r"org.bluez.GattCharacteristic1",
        r"org.bluez.GattDescriptor1",
        r"org.bluez.GattManager1",
    ]
    FILENAME_PATTERNS = [
        r"bluetoothctl",
        r"libbluetooth.so",
        r"hcitool",
        r"gatttool",
        r"btmon",
        r"bluemoon",
        r"btmgmt",
        r"obexctl",
        r"sdptool",
    ]
    VERSION_PATTERNS = [
        r"bluetoothctl: ([5]+\.[0-9]+\.[0-9]+)",
        r"bluetoothctl: ([5]+\.[0-9]+)",
    ]
    VENDOR_PRODUCT = [("bluez", "bluez")]

    def get_version(self, lines, filename):
        """ This will only work if the filename matches for bluetoothctl"""
        version_info = super().get_version(lines, filename)
        pattern = r"([5]+\.[0-9]+)"
        next_patterns = [
            r"Version %s",
            r"%s ver %s",
            r"hcitool - HCI Tool ver %s",
            r"Bluetooth daemon %s",
            r"Bluetooth monitor ver %s",
            r"Firmware file is too short",
            r"btmgmt ver %s",
            r"Failed to set signal mask",
            r"sdptool - SDP tool v%s",
        ]
        if "is_or_contains" in version_info.keys():
            if version_info["is_or_contains"] == "is":
                if self.guess_contains(lines):
                    for line in range(len(lines)):
                        match = search(pattern, lines[line])
                        if match:
                            for next_pattern in next_patterns:
                                if search(next_pattern, lines[line + 1]):
                                    version_info["version"] = lines[line]
                                    return version_info
        return version_info
