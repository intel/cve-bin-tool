# Copyright (C) 2024 Intel Corporation
# SPDX-License-Identifier: GPL-3.0-or-later
import json


class ConfigGenerator:
    """
    A class for generating configuration files in different formats.
    """

    def config_generator(config_format, organized_arguments):
        """
        Generate a configuration file in the specified format.

        Args:
            config_format (str): The format of the configuration file (".toml" or ".yaml").
            organized_arguments (dict): A dictionary containing organized arguments.

        Returns:
            None
        """
        if config_format == "toml":
            first_char = "["
            last_char = "]"
            sign = "="
            coma = '"'
        elif config_format == "yaml":
            first_char = ""
            last_char = ":"
            sign = ":"
            coma = ""
        else:
            return
        with open(f"config.{config_format}", "w") as f:
            for group_title, group_args in organized_arguments.items():
                if group_title == "positional_arguments":
                    continue
                group_title = group_title.lower()
                if group_title == "output":
                    if group_args["sbom-output"]["arg_value"] == "":
                        group_args["sbom-type"]["arg_value"] = None
                        group_args["sbom-format"]["arg_value"] = None
                        group_args["sbom-output"]["arg_value"] = None
                    if group_args["vex"]["arg_value"] == "":
                        group_args["vex"]["arg_value"] = None
                f.write(f"{first_char}{group_title}{last_char}\n")
                for arg_name, arg_value_help in group_args.items():
                    arg_value = arg_value_help["arg_value"]
                    arg_help = arg_value_help["help"]
                    arg_name = arg_name.replace("-", "_")
                    if arg_name in ["config", "generate_config"]:
                        arg_value = None
                    if "\n" in arg_help:
                        arg_help = arg_help.replace("\n", "  ")
                    if arg_value in [True, False] or isinstance(arg_value, list):
                        arg_val = (
                            json.dumps(arg_value).lower()
                            if arg_value in [True, False]
                            else arg_value
                        )
                        f.write(f"  {arg_name} {sign} {arg_val}\n" f"  #{arg_help}\n\n")
                    elif arg_value is not None:
                        f.write(
                            f"  {arg_name} {sign} {coma}{arg_value}{coma}\n"
                            f"  #{arg_help}\n\n"
                        )
