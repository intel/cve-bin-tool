# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: GPL-3.0-or-later

import re
import string


"""
A class for comparing arbitrary versions of products.

Splits versions up using common whitespace delimiters and also splits out letters
so that things like openSSL's 1.1.1y type of version will work too.

This may need some additional smarts for stuff like "rc" or "beta" and potentially for
things like distro versioning.  I don't know yet.
"""

def parse_version(version_string: str):
    """
    Splits a version string into an array for comparison.
    This includes dealing with some letters.

    e.g. 1.1.1a would become [1, 1, 1, a]
    """
    versionString = version_string
    versionArray = []

    # Attempt a split based on common whitespace delimiters
    split_version = versionString.split(".")

    # if the whole string was numeric then we're done and you can move on
    if versionString.isnumeric():
        versionArray = split_version
        return versionArray

    # Go through and split up anything like 6a in to 6 and a
    letter_number = re.compile("([0-9]+)([a-zA-Z]+)")
    for section in split_version:
        # if it's all letters or all nubmers, just add it to the array
        if section.isnumeric() or section.isalpha():
            versionArray.append(section)

        # if it looks like 42a split out the letters and numbers
        elif re.match(letter_number, section):
            result = re.findall(letter_number, section)

            # We're expecting a result that looks like [("42", "a")] but let's verify
            # and then add it to the array
            if len(result) == 1 and len(result[0]) == 2:
                versionArray.append(result[0][0])
                versionArray.append(result[0][1])
            else:
                print(f"Cannot parse version {version_string}")

        # If all else fails, complain
        else:
            print(f"What is {section} supposed to be?")

    return versionArray

def version_compare(v1: str, v2: str):
    """
    Compare two versions by converting them to arrays

    returns 0 if they're the same.
    returns 1 if v1 > v2
    returns -1 if v1 < v2
    """
    v1_array = parse_version(v1)
    v2_array = parse_version(v2)

    for i in range(len(v1_array)):
        if len(v2_array) > i:
            if v1_array[i] > v2_array[i]:
                return 1
            if v1_array[i] < v2_array[i]:
                return -1
        else:
            return 1

    # if we made it this far and they've matched, see if there's more stuff in v2
    # e.g. 1.2.3 or 1.2a comes after 1.2
    # FIXME: we might need to do something special for beta,rc or anything that might come before
    if len(v2_array) > len(v1_array):
        return -1

    return 0

class Version(str):
   """
   A class to make version comparisons look more pretty:

   Version("1.2") > Version("1.1")
   """

   def __cmp__(self, other):
       return version_compare(self, other)

   def __lt__(self, other):
       return bool(version_compare(self, other) < 0)

   def __le__(self, other):
       return bool(version_compare(self, other) <= 0)

   def __gt__(self, other):
       return bool(version_compare(self, other) > 0)

   def __ge__(self, other):
       return bool(version_compare(self, other) >= 0)

   def __eq__(self, other):
       return bool(version_compare(self, other) == 0)

   def __ne__(self, other):
       return bool(version_compare(self, other) != 0)


   def __repr__(self):
       return f"Version: {self}"
