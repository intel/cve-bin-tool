import csv
import json
import os
import sys
import pygal
import webbrowser

from datetime import datetime
from jinja2 import Environment, FileSystemLoader

from .log import LOGGER


class OutputEngine(object):
    # Max space for each console tabular cell
    MODULENAME_MAX = 18
    VERSION_MAX = 9
    CVE_NUMBER_MAX = 18
    CVE_SEVERITY_MAX = 9
    DOTS = "..."

    def __init__(
        self,
        filename=None,
        modules=None,
        logger=None,
        files_with_cve=0,
        total_files=0,
        files_without_cve=0,
    ):
        if logger is None:
            logger = LOGGER.getChild(self.__class__.__name__)
        self.filename = filename
        self.modules = modules
        self.logger = logger
        self.formatted_output = self.format_output()
        self.files_with_cve = files_with_cve
        self.files_without_cve = files_without_cve
        self.total_files = total_files

    def generate_filename(self, extension=None):
        """ Generates a random filename"""
        if extension:
            now = datetime.now().strftime("%Y-%m-%d.%H-%m-%S")
            self.filename = f"output.cve-bin-tool.{now}.{extension}"

    def output_cves(self, outfile, output_type=None):
        """ Output a list of CVEs
        format self.modules[checker_name][version] = dict{id: severity}
        to other formats like CSV or JSON
        """
        if output_type == "json":
            self.output_json(outfile)
        elif output_type == "csv":
            self.output_csv(outfile)
        elif output_type == "html":  # for now just generate dummy data
            self.output_html()
        else:  # console, or anything else that is unrecognised
            self.output_console(outfile)

    def format_output(self):
        """
        summary: format output in the list of dictionary format.

        Returns:
            type: list(dict) -- example: [{ "package": "curl",
                                            "version": "1.2.1",
                                            "cve_number": "CVE-1234-1234",
                                            "severity": "LOW"},
                                            ...]
        """
        formatted_output = []
        for package in self.modules:
            for version, cves in self.modules[package].items():
                for cve_number, cve_severity in cves.items():
                    formatted_output.append(
                        {
                            "package": package,
                            "version": version,
                            "cve_number": cve_number,
                            "severity": cve_severity,
                        }
                    )
        return formatted_output

    def output_json(self, outfile):
        """ Output a JSON of CVEs """
        json.dump(self.formatted_output, outfile, indent="    ")

    def output_csv(self, outfile):
        """ Output a CSV of CVEs """
        writer = csv.DictWriter(
            outfile, fieldnames=["package", "version", "cve_number", "severity"]
        )
        writer.writeheader()
        writer.writerows(self.formatted_output)

    def write_console(self, modulename, version, cve_number, cve_severity, outfile):
        """ Output Module, Version, CVE_Number, Severity to the console in tabular form"""

        if len(modulename) > (self.MODULENAME_MAX - len(self.DOTS)):
            modulename = modulename[: self.MODULENAME_MAX - len(self.DOTS)] + self.DOTS
        if len(version) > (self.VERSION_MAX - len(self.DOTS)):
            version = version[: self.VERSION_MAX - len(self.DOTS)] + self.DOTS
        # Calculate length of -- modulename, version, cve_number, cve_severity
        modulename_len = len(modulename)
        version_len = len(str(version))
        cve_number_len = len(cve_number)
        cve_severity_len = len(cve_severity)

        # Generate all the fields with appropriate space to be fit into tabular form
        modulename = f"{modulename}{' ' * (self.MODULENAME_MAX - modulename_len)}"
        version = f"{version}{' ' * (self.VERSION_MAX - version_len)}"
        cve_number = f"{cve_number}{' ' * (self.CVE_NUMBER_MAX - cve_number_len)}"
        cve_severity = (
            f"{cve_severity}{' ' * (self.CVE_SEVERITY_MAX - cve_severity_len)}"
        )

        # End string marks end for the previous length data
        end_string = f"+{'-' * (self.MODULENAME_MAX + 2)}+{'-' * (self.VERSION_MAX + 2)}+{'-' * (self.CVE_NUMBER_MAX + 2)}+{'-' * (self.CVE_SEVERITY_MAX + 2)}+\n"

        # string generate the details in tabular form
        string = f"| {modulename} | {version} | {cve_number} | {cve_severity} |\n"

        # Write String and End String to the console
        outfile.write(string)
        outfile.write(end_string)

    def output_console(self, outfile):
        """ Output list of CVEs in a tabular format  """

        # Now contains the time at which report is generated
        now = datetime.now().strftime("%Y-%m-%d  %H:%m:%S")

        # The main heading containing CVE-Bin-Tool logo
        heading = f"""
+=================================================================+
|   ___ _    __ ____    ___  ___  _   _    _____  ___  ___  _     |
|  / __| \  / /| ___]  |   )[   ]| \ | |  [_   _]| _ || _ || |    |
| | |__ \ \/ / | _]_ = | <   | | | |\| | =  | |  ||_||||_||| |__  |
|  \___| \__/  |___ ]  |___)[___]|_| \_|    |_|  |___||___||____| |
|                                                                 |
+=================================================================+
|   CVE Binary Tool Report Generated: {now}        |
+=================================================================+

+=================================================================+
|   MODULE NAME      |  VERSION  |    CVE NUMBER      | SEVERITY  |
+=================================================================+
"""

        # Outputs Heading to the console
        outfile.write(heading)

        # for every module that is scanned -- output to the console
        for output in self.formatted_output:
            # call to the write_console function for each module,version
            self.write_console(
                output["package"],
                output["version"],
                output["cve_number"],
                output["severity"],
                outfile,
            )

    def output_file(self, output_type="csv"):
        """ Generate a file for list of CVE """
        if self.filename == sys.stdout:
            # short circuit file opening logic if we are actually
            # just writing to stdout
            self.output_cves(self.filename, output_type)
            return

        # Check if we need to generate a filename
        if self.filename is None:
            self.generate_filename(output_type)
        else:
            # check if the filename already exists
            file_list = os.listdir(os.getcwd())
            if self.filename in file_list:
                self.logger.warning(
                    f"Failed to write at '{self.filename}'. File already exists"
                )
                self.logger.info(
                    "Generating a new filename with Default Naming Convention"
                )
                self.generate_filename(output_type)

            # try opening that file
            try:
                with open(self.filename, "w") as f:
                    f.write("testing")
                os.remove(self.filename)
            except Exception as E:
                self.logger.warning(E)
                self.logger.info("Switching Back to Default Naming Convention")
                self.generate_filename(output_type)

        # Log the filename generated
        self.logger.info(f"Output stored at {os.getcwd()}/{self.filename}")

        # call to output_cves
        with open(self.filename, "w") as f:
            self.output_cves(f, output_type)

    def output_html(self):
        """Returns a HTML report for CVE's
        """
        # Example Code ---  this will only generate dummy data

        # Step 1: Load all the templates

        # Root folder where html_reports is present
        root = os.path.dirname(os.path.abspath(__file__))

        # Template Directory contains all the html files
        templates_dir = os.path.join(root, "html_reports", "templates")
        templates_env = Environment(loader=FileSystemLoader(templates_dir))
        base = templates_env.get_template("base.html")
        dashboard = templates_env.get_template("dashboard.html")
        cve_row = templates_env.get_template("row_cve.html")
        product_row = templates_env.get_template("row_product.html")

        # structure of data needed for genearting Report.
        # Dummy Data
        products = [
            {
                "vendor": "Python",
                "name": "Python",
                "version": "X.X.X",
                "cve_count": 5,
                "cves": [
                    {
                        "cve_number": "CVE-XXX-XXXX",
                        "severity": "critical",
                        "summary": "I'll tell you a summary of error found in \
                            the version of this library",
                    },
                    {
                        "cve_number": "CVE-XXX-XXXX",
                        "severity": "high",
                        "summary": "I'll tell you a summary of error found in \
                            the version of this library",
                    },
                    {
                        "cve_number": "CVE-XXX-XXXX",
                        "severity": "medium",
                        "summary": "I'll tell you a summary of error found in \
                            the version of this library",
                    },
                    {
                        "cve_number": "CVE-XXX-XXXX",
                        "severity": "low",
                        "summary": "I'll tell you a summary of error found in \
                            the version of this library",
                    },
                    {
                        "cve_number": "CVE-XXX-XXXX",
                        "severity": "low",
                        "summary": "I'll tell you a summary of error found in \
                            the version of this library",
                    },
                ],
            },
            {
                "vendor": "zlib",
                "name": "zlib",
                "version": "X.X.X",
                "cve_count": 5,
                "cves": [
                    {
                        "cve_number": "CVE-XXX-XXXX",
                        "severity": "critical",
                        "summary": "I'll tell you a summary of error found in \
                            the version of this library",
                    },
                    {
                        "cve_number": "CVE-XXX-XXXX",
                        "severity": "high",
                        "summary": "I'll tell you a summary of error found in \
                            the version of this library",
                    },
                    {
                        "cve_number": "CVE-XXX-XXXX",
                        "severity": "medium",
                        "summary": "I'll tell you a summary of error found in \
                            the version of this library",
                    },
                    {
                        "cve_number": "CVE-XXX-XXXX",
                        "severity": "low",
                        "summary": "I'll tell you a summary of error found in \
                            the version of this library",
                    },
                    {
                        "cve_number": "CVE-XXX-XXXX",
                        "severity": "low",
                        "summary": "I'll tell you a summary of error found in \
                            the version of this library",
                    },
                ],
            },
            {
                "vendor": "curl",
                "name": "curl",
                "version": "X.X.X",
                "cve_count": 5,
                "cves": [
                    {
                        "cve_number": "CVE-XXX-XXXX",
                        "severity": "high",
                        "summary": "I'll tell you a summary of error found in \
                            the version of this library",
                    },
                    {
                        "cve_number": "CVE-XXX-XXXX",
                        "severity": "high",
                        "summary": "I'll tell you a summary of error found in \
                            the version of this library",
                    },
                    {
                        "cve_number": "CVE-XXX-XXXX",
                        "severity": "medium",
                        "summary": "I'll tell you a summary of error found in \
                            the version of this library",
                    },
                    {
                        "cve_number": "CVE-XXX-XXXX",
                        "severity": "low",
                        "summary": "I'll tell you a summary of error found in \
                            the version of this library",
                    },
                    {
                        "cve_number": "CVE-XXX-XXXX",
                        "severity": "low",
                        "summary": "I'll tell you a summary of error found in \
                            the version of this library",
                    },
                ],
            },
            {
                "vendor": "icu",
                "name": "icu",
                "version": "X.X.X",
                "cve_count": 5,
                "cves": [
                    {
                        "cve_number": "CVE-XXX-XXXX",
                        "severity": "critical",
                        "summary": "I'll tell you a summary of error found in \
                            the version of this library",
                    },
                    {
                        "cve_number": "CVE-XXX-XXXX",
                        "severity": "high",
                        "summary": "I'll tell you a summary of error found in \
                            the version of this library",
                    },
                    {
                        "cve_number": "CVE-XXX-XXXX",
                        "severity": "medium",
                        "summary": "I'll tell you a summary of error found in \
                            the version of this library",
                    },
                    {
                        "cve_number": "CVE-XXX-XXXX",
                        "severity": "medium",
                        "summary": "I'll tell you a summary of error found in \
                            the version of this library",
                    },
                    {
                        "cve_number": "CVE-XXX-XXXX",
                        "severity": "low",
                        "summary": "I'll tell you a summary of error found in \
                            the version of this library",
                    },
                ],
            },
            {
                "vendor": "libxml",
                "name": "libxml",
                "version": "X.X.X",
                "cve_count": 5,
                "cves": [
                    {
                        "cve_number": "CVE-XXX-XXXX",
                        "severity": "critical",
                        "summary": "I'll tell you a summary of error found in \
                            the version of this library",
                    },
                    {
                        "cve_number": "CVE-XXX-XXXX",
                        "severity": "critical",
                        "summary": "I'll tell you a summary of error found in \
                            the version of this library",
                    },
                    {
                        "cve_number": "CVE-XXX-XXXX",
                        "severity": "medium",
                        "summary": "I'll tell you a summary of error found in \
                            the version of this library",
                    },
                    {
                        "cve_number": "CVE-XXX-XXXX",
                        "severity": "low",
                        "summary": "I'll tell you a summary of error found in \
                            the version of this library",
                    },
                    {
                        "cve_number": "CVE-XXX-XXXX",
                        "severity": "low",
                        "summary": "I'll tell you a summary of error found in \
                            the version of this library",
                    },
                ],
            },
        ]
        # Step 2: Prepare Charts

        # 2.1: Generate Configration files needed by Pygal

        # main configration file
        config = pygal.Config()
        config.disable_xml_declaration = True
        config.legend_at_bottom = True
        config.human_readable = True

        # 2.2 Add a custom style sheet (optional but we need )
        # custom style for Product Vulnerability chart
        products_style = pygal.style.Style(
            background="transparent",
            title_font_size=25,
            tooltip_font_size=17,
            legend_font_size=15,
            colors=("red", "green"),
        )
        # custom style for Product CVE's chart
        cves_style = pygal.style.Style(
            background="transparent",
            title_font_size=25,
            tooltip_font_size=20,
            legend_font_size=15,
        )
        # Custom style for severity analysis chart
        analysis_style = pygal.style.Style(
            background="transparent",
            title_font_size=25,
            tooltip_font_size=20,
            legend_font_size=25,
            colors=("red", "#ff5400", "yellow", "green"),
        )

        # 2.3 Start generating graph with the data
        # dash graph1: Products Vulnerability Graph
        product_pie = pygal.Pie(config, style=products_style, inner_radius=0.4,)
        product_pie.add(f"Vulnerable - {self.files_with_cve}", self.files_with_cve)
        product_pie.add(
            f"No Known Vulnerability - {self.files_without_cve}",
            self.files_without_cve,
        )

        # dash graph2: Product CVE's Graph
        cve_bar = pygal.Bar(config, style=cves_style)
        for product in products:
            cve_bar.add(f"{product['name']}-{product['version']}", 3)

        products_found = ""
        # List of Products
        for product in products:
            # Initialize Pie Chart used for cve analysis
            analysis_pie = pygal.Pie(
                config,
                style=analysis_style,
                inner_radius=0.4,
                show_legend=True,
                title=f"Severity Analysis of {product['name']} \
                    {product['version']}",
            )

            # List cves contains template version of all the cves
            list_cves = ""

            # hid will be used as id by HTML report to remove collisions
            hid = f"{product['name']}{''.join(product['version'].split('.'))}"

            analysis_data = {"critical": 0, "high": 0, "medium": 0, "low": 0}
            for i, cve in enumerate(product["cves"]):
                # render CVE template with data and add to list_cves
                list_cves += cve_row.render(
                    cve_number=cve["cve_number"],
                    severity=cve["severity"],
                    summary=cve["summary"],
                    var_id=f"{hid}{i}",
                    fix_id=hid,
                )

                # Add CVE data to analysis chart
                if cve["severity"].lower() == "critical":
                    analysis_data["critical"] += 1
                elif cve["severity"].lower() == "high":
                    analysis_data["high"] += 1
                elif cve["severity"].lower() == "medium":
                    analysis_data["medium"] += 1
                elif cve["severity"].lower() == "low":
                    analysis_data["low"] += 1
                else:
                    pass

            # plot the data
            analysis_pie.add("critical", analysis_data["critical"])
            analysis_pie.add("high", analysis_data["high"])
            analysis_pie.add("medium", analysis_data["medium"])
            analysis_pie.add("low", analysis_data["low"])

            products_found += product_row.render(
                vendor=product["vendor"],
                name=product["name"],
                version=product["version"],
                cve_count=product["cve_count"],
                list_cves=list_cves,
                severity_analysis=analysis_pie.render(),
                fix_id=hid,
            )

        # Dashboard Rendering
        dashboard = dashboard.render(
            graph_cves=cve_bar.render(),
            graph_products=product_pie.render(),
            total_files=self.total_files,
            files_with_cve=self.files_with_cve
        )

        # try to load the bigger files just before the generation of report

        # Style directory conatains all the CSS files
        styles_dir = os.path.join(root, "html_reports", "css")
        styles_env = Environment(loader=FileSystemLoader(styles_dir))
        style_main = styles_env.get_template("main.css")
        style_bootstrap = styles_env.get_template("bootstrap.min.css")

        # Script directory will contain all the JS files
        scripts_dir = os.path.join(root, "html_reports", "js")
        scripts_env = Environment(loader=FileSystemLoader(scripts_dir))
        script_main = scripts_env.get_template("main.js")
        script_bootstrap = scripts_env.get_template("bootstrap.min.js")
        script_pygal = scripts_env.get_template("pygal-tooltips.min.js")
        script_jquery = scripts_env.get_template("jquery-3.4.1.slim.min.js")

        # Render the base html to generate report
        filename = os.path.join(root, "html_reports", "Example", "example.html")
        with open(filename, "w") as fh:
            fh.write(
                base.render(
                    date=datetime.now().strftime("%d %b %Y"),
                    dashboard=dashboard,
                    products_found=products_found,
                    style_main=style_main.render(),
                    style_bootstrap=style_bootstrap.render(),
                    script_main=script_main.render(),
                    script_jquery=script_jquery.render(),
                    script_bootstrap=script_bootstrap.render(),
                    script_pygal=script_pygal.render(),
                )
            )

        self.logger.info("Opening Report in Browser. Please Wait...")
        webbrowser.open(filename)
