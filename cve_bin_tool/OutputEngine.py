import csv
import json
import os

from datetime import datetime
from .log import LOGGER


class OutputEngine(object):
    def __init__(self, filename=None, modules=None, logger=None):
        if logger is None:
            logger = LOGGER.getChild(self.__class__.__name__)
        self.filename = filename
        self.modules = modules
        self.logger = logger

        # Max space for each console tabular cell
        self.MODULENAME_MAX = 18
        self.VERSION_MAX = 9
        self.CVE_NUMBER_MAX = 18
        self.CVE_SEVERITY_MAX = 9

    def generate_filename(self, extention=None):
        """ Generates a random filename"""
        if not extention == None:
            now = datetime.now().strftime("%Y-%m-%d.%H:%m:%S")
            self.filename = f"output.cve-bin-tool.{now}.{extention}"

    def output_cves(self, outfile, output=None):
        """ Output a list of CVEs
        format self.modules[checker_name][version] = dict{id: severity}
        to other formats like CSV or JSON
        """
        if output == "json":
            self.output_json(outfile)
        elif output == "csv":
            self.output_csv(outfile)
        else:  # console, or anything else that is unrecognised
            self.output_console(outfile)

    def formatted_modules(self):
        """ Returns self.modules converted into form
        formatted_output[modulesname][version] = {
            "cve": cve_number,
            "severity": cve_severity,
        }
        """
        formatted_output = {}
        for modulename in self.modules:
            formatted_output[modulename] = {}
            for version, cves in self.modules[modulename].items():
                formatted_output[modulename][version] = []
                for cve_number, cve_severity in cves.items():
                    formatted_output[modulename][version].append(
                        {"cve": cve_number, "severity": cve_severity,}
                    )
        return formatted_output

    def output_json(self, outfile):
        """ Output a JSON of CVEs """
        json.dump(self.formatted_modules(), outfile, indent="   ")

    def output_csv(self, outfile):
        """ Output a CSV of CVEs """
        writer = csv.writer(outfile)
        writer.writerow(["Module Name", "Version", "CVE Number", "Severity"])
        for modulename, versions in self.modules.items():
            for version, cve_list in versions.items():
                for cve_number, cve_severity in cve_list.items():
                    row = [modulename, version, cve_number, cve_severity]
                    writer.writerow(row)

    def write_console(self, modulename, version, cve_number, cve_severity, outfile):
        """ Output Module, Version, CVE_Number, Severity to the console in tabular form"""

        # Calculate length of -- modulename, version, cve_number, cve_severity
        MODULENAME_LEN = len(modulename)
        VERSION_LEN = len(str(version))
        CVE_NUMBER_LEN = len(cve_number)
        CVE_SEVERITY_LEN = len(cve_severity)

        # boolean variable to store -- Did we resized the cells ?
        cellResized = False

        # If length is greater than the max_length resize the tabular cells
        if self.MODULENAME_MAX < MODULENAME_LEN:
            self.MODULENAME_MAX = MODULENAME_LEN + 5
            cellResized = True

        if self.VERSION_MAX < VERSION_LEN:
            self.VERSION_MAX = VERSION_LEN + 5
            cellResized = True

        if self.CVE_NUMBER_MAX < CVE_NUMBER_LEN:
            self.CVE_NUMBER_MAX = CVE_NUMBER_LEN + 5
            cellResized = True

        if self.CVE_SEVERITY_MAX < CVE_SEVERITY_LEN:
            self.CVE_SEVERITY_MAX = CVE_SEVERITY_LEN + 5
            cellResized = True

        # Generate all the fields with appropriate space to be fit into tabular form
        modulename = f"{modulename}{' '* (self.MODULENAME_MAX - MODULENAME_LEN)}"
        version = f"{version}{' '* (self.VERSION_MAX - VERSION_LEN)}"
        cve_number = f"{cve_number}{' '* (self.CVE_NUMBER_MAX - CVE_NUMBER_LEN)}"
        cve_severity = (
            f"{cve_severity}{' '* (self.CVE_SEVERITY_MAX - CVE_SEVERITY_LEN)}"
        )

        # End string marks end for the previous length data
        end_string = f"+{'-'*(self.MODULENAME_MAX + 2)}+{'-'*(self.VERSION_MAX + 2)}+{'-'*(self.CVE_NUMBER_MAX + 2)}+{'-'*(self.CVE_SEVERITY_MAX + 2)}+\n"

        # If we resized the cell we must print the endstring above the data
        if cellResized:
            outfile.write(end_string)
        # string generate the details in tabular form
        string = f"| {modulename} | {version} | {cve_number} | {cve_severity} |\n"

        # Write String and End String to the console
        outfile.write(string)
        outfile.write(end_string)

    def output_console(self, outfile):
        """ Output list of CVEs in a tabular format  """

        # Now contains the time at which report is generated
        now = datetime.now().strftime("%Y-%m-%d  %H:%m:%S")

        # The main heading containing CVE-Bin-Tool logo
        heading = f"""
+=================================================================+
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
+=================================================================+
||     ____  __        __  _____      ______    __    __    _    ||
||    /$$$$| \$\      /$/ |$$$$$|    |$$$$$$\  |$$|  |$$\  |$|   ||
||   |$$      \$\    /$/  |$____     |$____$/  |$$|  |$$$\ |$|   ||
||   |$$       \$\  /$/   |$$$$$| == |$$$$$$\  |$$|  |$|\$\|$|   ||
||   |$$        \$\/$/    |$____  `` |$_____$  |$$|  |$| \$$$|   ||
||    \$$$$|     \$$/     |$$$$$|    |$$$$$$/  |$4|  |$|  \$$|   ||
||     `````      ``       ``````     ``````    ```   ``   ```   ||
||     ____________    ________      ________     __             ||
||    |$$$$$$$$$$$$|  /$$$$$$$$\    /$$$$$$$$\   |$$|            || 
||         |$$|      |$$|    |$$|  |$$|    |$$|  |$$|            ||
||         |$$|      |$$|    |$$|  |$$|    |$$|  |$$|            ||
||         |$$|      |$$|    |$$|  |$$|    |$$|  |$$|            ||
||         |$$|      |$$|    |$$|  |$$|    |$$|  |$$|_______     ||
||         |$$|       \$$$$$$$$/    \$$$$$$$$/   |$$$$$$$$$$|    ||
||         ````        ````````      ````````    ````````````    ||
+=================================================================+
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
+=================================================================+

+=================================================================+
|   Report Generated:{now}                         |
+=================================================================+

+=================================================================+ 
|   MODULE NAME      |  VERSION  |    CVE NUMBER      | SEVERITY  |
+=================================================================+
"""

        # Outputs Heading to the console
        outfile.write(heading)

        # for every module that is scanned -- output to the console
        for modulename, versions in self.modules.items():
            for version, cve_list in versions.items():
                for cve_number, cve_severity in cve_list.items():
                    # call to the write_console function for each module,version
                    self.write_console(
                        modulename, version, cve_number, cve_severity, outfile
                    )

    def output_file(self, output="csv"):

        """ Generate a file for list of CVE """

        # Check if we need to generate a filename
        if self.filename == None:
            self.generate_filename(output)
        else:
            # check if the filename already exists
            file_list = os.listdir(os.getcwd())
            if self.filename in file_list:
                self.logger.warning(
                    f"Failed to write at '{self.filename}'. File already exists"
                )
                self.logger.info(
                    "Generating a new filename with Default Naming Convention"
                )
                self.generate_filename(output)

            # try opening that file
            try:
                with open(self.filename, "w") as f:
                    f.write("testing")
                os.remove(self.filename)
            except Exception as E:
                self.logger.warning(E)
                self.logger.info("Switching Back to Default Naming Convention")
                self.generate_filename(output)

        # Log the filename generated
        self.logger.info(f"Output stored at {os.getcwd()}/{self.filename}")

        # call to output_cves
        with open(self.filename, "w") as f:
            self.output_cves(f, output)
