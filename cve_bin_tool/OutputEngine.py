import csv
import json
import os

from datetime import datetime
from .log import LOGGER


class OutputEngine(object):
    def __init__(self, filename=None, modules=None, logger=None):
        if logger is None:
            logger = LOGGER.getChild(self.__class__.__name__)
        self.filename = filename
        self.modules = modules
        self.logger = logger

    def generate_filename(self, extention=None):
        """ Generates a random filename"""
        if not extention == None:
            now = datetime.now().strftime("%Y-%m-%d.%H:%m:%S")
            self.filename = f"output.cve-bin-tool.{now}.{extention}"

    def output_cves(self, outfile, output=None):
        """ Output a list of CVEs
        format self.modules[checker_name][version] = dict{id: severity}
        to other formats like CSV or JSON
        """
        if output == "json":
            self.output_json(outfile)
        else:  # csv, console, or anything else that is unrecognised
            self.output_csv(outfile)

    def output_json(self, outfile):
        """ Output a JSON of CVEs """
        json.dump(self.modules, outfile)

    def output_csv(self, outfile):
        """ Output a CSV of CVEs """
        writer = csv.writer(outfile)
        writer.writerow(["Module Name", "Version", "CVE Number", "Severity"])
        for modulename, versions in self.modules.items():
            for version, cve_list in versions.items():
                for cve_number, cve_severity in cve_list.items():
                    row = [modulename, version, cve_number, cve_severity]
                    writer.writerow(row)

    def output_file(self, output="csv"):

        """ Generate a file for list of CVE """

        # Check if we need to generate a filename
        if self.filename == None:
            self.generate_filename(output)
        else:
            self.filename = f"{self.filename}.{output}"
            # check if the filename already exists
            file_list = os.listdir(os.getcwd())
            if self.filename in file_list:
                self.logger.warning(
                    f"Failed to write at '{self.filename}'. File already exists"
                )
                self.logger.info(
                    "Generating a new filename with Default Naming Convention"
                )
                self.generate_filename(output)

            # try opening that file
            try:
                with open(self.filename, "w") as f:
                    f.write("testing")
                os.remove(self.filename)
            except Exception as E:
                self.logger.warning(E)
                self.logger.info("Switching Back to Default Naming Convention")
                self.generate_filename(output)

        # Log the filename generated
        self.logger.info(f"Output stored at {os.getcwd()}/{self.filename}")

        # call to output_cves
        with open(self.filename, "w") as f:
            self.output_cves(f, output)
