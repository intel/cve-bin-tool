import csv
import json
import os

from datetime import datetime
from .log import LOGGER


class OutputEngine(object):
    def __init__(self, filename=None, modules=None, logger=None):
        if logger is None:
            logger = LOGGER.getChild(self.__class__.__name__)
        self.filename = filename
        self.modules = modules
        self.logger = logger

    def generate_filename(self, extention=None):
        """ Generates a random filename"""
        if not extention == None:
            now = datetime.now().strftime("%Y-%m-%d.%H:%m:%S")
            self.filename = f"output.cve-bin-tool.{now}.{extention}"

    def output_cves(self, outfile, output=None):
        """ Output a list of CVEs
        format self.modules[checker_name][version] = dict{id: severity}
        to other formats like CSV or JSON
        """
        if output == "json":
            self.output_json(outfile)
        elif output == "csv":  
            self.output_csv(outfile)
        else: # console, or anything else that is unrecognised
            self.output_console(outfile)

    def formatted_modules(self):
        """ Returns self.modules converted into form
        formatted_output[modulesname][version] = {
            "cve": cve_number,
            "severity": cve_severity,
        }
        """
        formatted_output = {}
        for modulename in self.modules:
            formatted_output[modulename] = {}
            for version, cves in self.modules[modulename].items():
                formatted_output[modulename][version] = []
                for cve_number, cve_severity in cves.items():
                    formatted_output[modulename][version].append(
                        {"cve": cve_number, "severity": cve_severity,}
                    )
        return formatted_output

    def output_json(self, outfile):
        """ Output a JSON of CVEs """
        json.dump(self.formatted_modules(), outfile, indent="   ")

    def output_csv(self, outfile):
        """ Output a CSV of CVEs """
        writer = csv.writer(outfile)
        writer.writerow(["Module Name", "Version", "CVE Number", "Severity"])
        for modulename, versions in self.modules.items():
            for version, cve_list in versions.items():
                for cve_number, cve_severity in cve_list.items():
                    row = [modulename, version, cve_number, cve_severity]
                    writer.writerow(row)
    
    def write_console(self, modulename,version,cve_number, cve_severity, outfile):
        """ returns console version"""
        space1  = " " * (15 - len(modulename))
        space2 = " " * (13 - len(str(version)))
        space3 = " " * (16 - len(cve_number))
        space4 = " " * (14 - len(cve_severity))
        string  = f"| {modulename}{space1}| {version}{space2}| {cve_number}{space3}| {cve_severity}{space4}|\n"
        end_string = "+----------------+--------------+-----------------+---------------+\n"
        outfile.write(string)
        outfile.write(end_string)


        
    
    def output_console(self, outfile):
        """ Output a CSV of CVEs """
        now = datetime.now().strftime("%Y-%m-%d  %H:%m:%S")
        heading = f'''
+=================================================================+
+=================================================================+
||     _____ __        __ _____      ______    __    __    _     ||
||    /$$$$$|\$\      /$/|$$$$$|    |$$$$$$\  |$$|  |$$\  |$|    ||
||    |$$     \$\    /$/ |$____     |$____$/  |$$|  |$$$\ |$|    ||
||    |$$      \$\  /$/  |$$$$$| == |$$$$$$\  |$$|  |$|\$\|$|    ||
||    |$$       \$\/$/   |$____  `` |$_____$  |$$|  |$| \$$$|    ||
||    \$$$$$|    \$$/    |$$$$$|    |$$$$$$/  |$4|  |$|  \$$|    ||
||     ``````     ``      ``````     ``````    ```   ``   ```    ||
||     ____________    ________      ________     __             ||
||    |$$$$$$$$$$$$|  /$$$$$$$$\    /$$$$$$$$\   |$$|            || 
||         |$$|      |$$|    |$$|  |$$|    |$$|  |$$|            ||
||         |$$|      |$$|    |$$|  |$$|    |$$|  |$$|            ||
||         |$$|      |$$|    |$$|  |$$|    |$$|  |$$|            ||
||         |$$|      |$$|    |$$|  |$$|    |$$|  |$$|_______     ||
||         |$$|       \$$$$$$$$/    \$$$$$$$$/   |$$$$$$$$$$|    ||
||         ````        ````````      ````````    ````````````    ||
+=================================================================+
+=================================================================+
|   Report Generated:{now}                         |
+=================================================================+ 
|   Module Name  |   Version    |   CVE Number    |   Severity    |
+=================================================================+
'''
        outfile.write(heading)
       
        for modulename, versions in self.modules.items():
            for version, cve_list in versions.items():
                for cve_number, cve_severity in cve_list.items():
                    row = [modulename, version, cve_number, cve_severity]
                    self.write_console(modulename,version, cve_number, cve_severity, outfile)


    def output_file(self, output="csv"):

        """ Generate a file for list of CVE """

        # Check if we need to generate a filename
        if self.filename == None:
            self.generate_filename(output)
        else:
            # check if the filename already exists
            file_list = os.listdir(os.getcwd())
            if self.filename in file_list:
                self.logger.warning(
                    f"Failed to write at '{self.filename}'. File already exists"
                )
                self.logger.info(
                    "Generating a new filename with Default Naming Convention"
                )
                self.generate_filename(output)

            # try opening that file
            try:
                with open(self.filename, "w") as f:
                    f.write("testing")
                os.remove(self.filename)
            except Exception as E:
                self.logger.warning(E)
                self.logger.info("Switching Back to Default Naming Convention")
                self.generate_filename(output)

        # Log the filename generated
        self.logger.info(f"Output stored at {os.getcwd()}/{self.filename}")

        # call to output_cves
        with open(self.filename, "w") as f:
            self.output_cves(f, output)
