# pylint: disable=too-many-arguments
""" Utility classes for the CVE Binary Tool """
import asyncio
import glob
import os
import shutil
import tempfile
from functools import partial, wraps

from cve_bin_tool.util import inpath


def async_wrap(func):
    @wraps(func)
    async def run(*args, loop=None, executor=None, **kwargs):
        if loop is None:
            loop = asyncio.get_event_loop()
        pfunc = partial(func, *args, **kwargs)
        return await loop.run_in_executor(executor, pfunc)

    return run


async def aio_run_command(args):
    process = await asyncio.create_subprocess_exec(
        *args, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE,
    )
    stdout, stderr = await process.communicate()
    return stdout, stderr  # binary encoded


class ChangeDirContext:
    def __init__(self, destination_dir):
        self.current_dir = os.getcwd()
        self.destination_dir = destination_dir

    async def __aenter__(self):
        os.chdir(self.destination_dir)

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        os.chdir(self.current_dir)


class FileIO:
    def __init__(self, filename, *args, **kwargs):
        self.filename = filename
        self._args = args
        self._kwargs = kwargs
        self._open = async_wrap(open)
        self._file = None

    async def open(self):
        file = await self._open(self.filename, *self._args, **self._kwargs)
        self._file = file
        async_attrs = [
            "close",
            "flush",
            "isatty",
            "read",
            "readable",
            "readline",
            "readlines",
            "seek",
            "seekable",
            "tell",
            "truncate",
            "write",
            "writable",
            "writelines",
        ]
        sync_attrs = [
            "detach",
            "fileno",
            "readable",
            "buffer",
            "closed",
            "encoding",
            "errors",
            "line_buffering",
            "newlines",
        ]
        [setattr(self, attr, async_wrap(getattr(file, attr))) for attr in async_attrs]
        [setattr(self, attr, getattr(file, attr)) for attr in sync_attrs]
        return self  # return self to allow: f = await FileIO(file, "r").open()

    async def __aenter__(self):
        return await self.open()

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        return await self.close()


aio_rmdir = async_wrap(shutil.rmtree)
aio_rmfile = async_wrap(os.remove)
aio_unpack_archive = async_wrap(shutil.unpack_archive)
aio_glob = async_wrap(glob.glob)
aio_mkdtemp = async_wrap(tempfile.mkdtemp)
aio_makedirs = async_wrap(os.makedirs)
aio_inpath = async_wrap(inpath)
