"""
See doc/DATA_FLOW_SCANNER.rst for more information
"""
import sys
import asyncio
import pathlib
import platform
from typing import Dict, NewType

import dffml

import dffml_feature_git.feature.definitions
import dffml_feature_git.feature.operations


DirectoryToScan = NewType("DirectoryToScan", pathlib.Path)
ScanResults = NewType("ScanResults", dict)
InputOfUnknownType = NewType("InputOfUnknownType", str)


@dffml.op(
    inputs={
        "repo": dffml_feature_git.feature.definitions.git_repository,
    },
    outputs={
        "result": DirectoryToScan,
    },
)
async def repo_to_directory(repo):
    return {"result": repo.directory}


@dffml.op
async def scan_directory(
    directory: DirectoryToScan,
) -> ScanResults:
    pass


@dffml.op
async def scan_directory(
    arg: InputOfUnknownType,
) -> ScanResults:
    pass


COLLECTOR_DATAFLOW = dffml.DataFlow(
    *dffml.opimp_in(dffml_feature_git.feature.operations),
    *dffml.opimp_in(sys.modules[__name__]),
)

# CVEBinToolDataFlow = dffml.SystemContext(
#     upstream=COLLECTOR_DATAFLOW,
# )
# scanner = CVEBinToolDataFlow.deployment()


async def main():
    # async for results in scanner():
    async for _ctx, results in dffml.run(
        COLLECTOR_DATAFLOW,
        {
            arg: [
                dffml.Input(
                    value=arg,
                    definition=dffml_feature_git.feature.definitions.URL,
                    # definition=InputOfUnknownType,
                ),
            ]
            for arg in sys.argv[1:]
        },
    ):
        print(_ctx, results)


if __name__ == "__main__":
    asyncio.run(main())
