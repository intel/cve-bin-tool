# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: GPL-3.0-or-later

import sys
import tempfile
from pathlib import Path

import atheris
import atheris_libprotobuf_mutator
from google.protobuf.json_format import MessageToDict

import fuzz.generated.renv_lock_pb2 as renv_lock_pb2
from cve_bin_tool.cvedb import CVEDB
from cve_bin_tool.log import LOGGER

with atheris.instrument_imports():
    from cve_bin_tool.parsers.r import RParser


cve_db = CVEDB()
logger = LOGGER.getChild("Fuzz")


def RenvLockBuilder(data):
    # Parse the JSON data
    json_data = MessageToDict(
        data, preserving_proto_field_name=True, including_default_value_fields=True
    )

    with open(file_path, "w") as f:
        # Write R version information
        r_version = json_data.get("R", {}).get("Version", "")
        if r_version:
            f.write(f"R Version: {r_version}\n\n")

        # Write Bioconductor version information
        bioconductor_version = json_data.get("Bioconductor", {}).get("Version", "")
        if bioconductor_version:
            f.write(f"Bioconductor Version: {bioconductor_version}\n\n")

        # Write packages
        for package_name, package_data in json_data.get("Packages", {}).items():
            f.write(f"[[package]]\n")
            f.write(f'name = "{package_name}"\n')
            f.write(f'version = "{package_data.get("Version", "")}"\n')
            f.write(f'source = "{package_data.get("Source", "")}"\n')
            f.write(f'repository = "{package_data.get("Repository", "")}"\n')
            f.write(f'hash = "{package_data.get("Hash", "")}"\n')

            # Write requirements, if any
            requirements = package_data.get("Requirements", [])
            if requirements:
                f.write("requirements = [\n")
                for requirement in requirements:
                    f.write(f'    "{requirement}",\n')
                f.write("]\n")
            f.write("\n")


def TestParseData(data):
    try:
        RenvLockBuilder(data)

        r_parser = RParser(cve_db, logger)
        r_parser.run_checker(file_path)

    except SystemExit:
        return


file_path = str(Path(tempfile.mkdtemp(prefix="cve-bin-tool-")) / "renv.lock")

atheris_libprotobuf_mutator.Setup(sys.argv, TestParseData, proto=renv_lock_pb2.RenvLock)
atheris.Fuzz()
