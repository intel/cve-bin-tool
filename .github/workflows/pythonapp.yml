name: cve-bin-tool

on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      longTests:
        description: 'Set true to run long tests manually'
        required: false
        default: 'false'

jobs:
  isort:
    name: Run isort
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Get cached Python packages
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade wheel setuptools
          python -m pip install -r requirements.txt -r doc/requirements.txt
          python -m pip install -r dev-recommended.txt
      - uses: isort/isort-action@master
        with:
            configuration: --profile black --check-only
            requirementsFiles: "requirements.txt doc/requirements.txt"

  check:
    name: Black check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: jpetrucciani/black-check@master

  pyupgrade:
    name: pyupgrade check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade pre-commit
          pre-commit install
      - name: Run pyupgrade
        run: |
          pre-commit run pyupgrade --all-files

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: get cached python packages
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r doc/requirements.txt
      - name: Build docs
        run: |
          cd doc/
          sphinx-build -b html . _build

  tests:
    name: Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python: [3.6, 3.7]
    timeout-minutes: 20
    env:
      ACTIONS: 1
      LONG_TESTS: 0
    steps:
      - name: Get Date
        id: get-date
        run: |
          echo "::set-output name=date::$(/bin/date -u "+%Y%m%d")"
        shell: bash
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python }}
      - name: get cached python packages
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: get cached database
        uses: actions/cache@v2
        with:
          path: ~/.cache/cve-bin-tool
          key: ${{ runner.os }}-cve-bin-tool-${{ steps.get-date.outputs.date }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Install cabextract
        run: sudo apt-get install cabextract
      - name: try single cli run of tool
        run: |
          python -m pip install -e .
          NO_EXIT_CVE_NUM=1 python -m cve_bin_tool.cli test/assets
      - name: Run async tests
        run: >
          pytest -n 4 -v
          --ignore=test/test_cli.py
          --ignore=test/test_cvedb.py
          --ignore=test/test_requirements.py
      - name: Run synchronous tests
        run: >
          pytest -v
          test/test_cli.py
          test/test_cvedb.py

  long_tests:
    name: Long tests on python3.8
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      ACTIONS: 1
      LONG_TESTS: 1
    steps:
      - name: Get Date
        id: get-date
        run: |
          echo "::set-output name=date::$(/bin/date -u "+%Y%m%d")"
        shell: bash
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: get cached python packages
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: get cached database
        uses: actions/cache@v2
        with:
          path: ~/.cache/cve-bin-tool
          key: ${{ runner.os }}-cve-bin-tool-${{ steps.get-date.outputs.date }}
      - uses: technote-space/get-diff-action@v4
        if: ${{ github.event.inputs.longTests != 'true' }}
        with:
          PATTERNS: |
            cve_bin_tool/checkers/*.py
            test/condensed-downloads/*
          FILES: |
            cvedb.py
            test_scanner.py
            test_cli.py
            test_json.py
          SET_ENV_NAME_COUNT: LONG_TESTS
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Install cabextract
        run: sudo apt-get install cabextract
      - name: try single cli run of tool
        run: |
          python -m pip install -e .
          NO_EXIT_CVE_NUM=1 python -m cve_bin_tool.cli test/assets
      - name: Run async tests
        run: >
          pytest --cov --cov-append -n 4 -v
          --ignore=test/test_cli.py
          --ignore=test/test_cvedb.py
          --ignore=test/test_requirements.py
      - name: Run synchronous tests
        run: >
          pytest -v --cov --cov-append --cov-report=xml
          test/test_cli.py
          test/test_cvedb.py
      - name: upload code coverage to codecov
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml
          flags: longtests
          name: codecov-umbrella
          fail_ci_if_error: false

  windows_tests:
    name: Windows py3.8
    runs-on: windows-latest
    timeout-minutes: 20
    env:
      ACTIONS: 1
      LONG_TESTS: 0
      NO_EXIT_CVE_NUM: 1
      PYTHONIOENCODING: 'utf8'
    steps:
      - name: Get Date
        id: get-date
        run: |
          echo "::set-output name=date::$(get-date -format "yyyyMMdd")"
        shell: powershell
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: get cached python packages
        uses: actions/cache@v2
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: get cached database
        uses: actions/cache@v2
        with:
          path: ~/.cache/cve-bin-tool
          key: ${{ runner.os }}-cve-bin-tool-${{ steps.get-date.outputs.date }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: try single cli run of tool
        run: |
          python -m pip install -e .
          python -m cve_bin_tool.cli test/assets
      - name: Run async tests
        run: >
          pytest -n 4 -v
          --ignore=test/test_cli.py
          --ignore=test/test_cvedb.py
          --ignore=test/test_requirements.py
          --ignore=test/test_helper_script.py
      - name: Run synchronous tests
        run: >
          pytest -v
          test/test_cli.py
          test/test_cvedb.py

  cve_scan:
    name: CVE Scan on dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Get Date
        id: get-date
        run: |
          echo "::set-output name=date::$(/bin/date -u "+%Y%m%d")"
        shell: bash
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: get cached python packages
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: get cached database
        uses: actions/cache@v2
        with:
          path: ~/.cache/cve-bin-tool
          key: ${{ runner.os }}-cve-bin-tool-${{ steps.get-date.outputs.date }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r doc/requirements.txt
      - name: Test to check for CVEs for python requirements and HTML report dependencies
        run: |
          pytest test/test_requirements.py
