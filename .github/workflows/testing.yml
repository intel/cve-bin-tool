name: Testing

on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      longTests:
        description: 'Force run long tests'
        required: false
        type: boolean
      externalSystem:
        description: 'Force run tests which rely on external connectivity'
        required: false
        type: boolean

env:
  ACTIONS: 1
  LONG_TESTS: 0
  EXTERNAL_SYSTEM: 0
  nvd_api_key: ${{ secrets.NVD_API_KEY }}

jobs:
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          cache: 'pip'
          cache-dependency-path: 'doc/requirements.txt'
      - name: Install doc dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools
          python -m pip install --upgrade wheel
          python -m pip install --upgrade -r doc/requirements.txt
      - name: Build docs
        run: |
          cd doc/
          sphinx-build -b html . _build

  tests:
    name: Linux tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ['3.7', '3.8', '3.9']
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
          cache: 'pip'
      - name: Get date
        id: get-date
        run: |
          echo "date=$(/bin/date -u "+%Y%m%d")" >> $GITHUB_OUTPUT
      - name: Get cached database
        uses: actions/cache@v3
        with:
          path: ~/.cache/cve-bin-tool
          key: ${{ runner.os }}-cve-bin-tool-${{ steps.get-date.outputs.date }}
      - name: Install cabextract
        run: sudo apt-get update && sudo apt-get install cabextract
      - name: Install OS dependencies for testing PDF
        run: sudo apt-get install build-essential libpoppler-cpp-dev pkg-config python3-dev
      - name: Install pdftotext, reportlab and cve-bin-tool
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools
          python -m pip install --upgrade wheel
          python -m pip install --upgrade pdftotext
          python -m pip install --upgrade reportlab
          python -m pip install --upgrade -r dev-requirements.txt
          python -m pip install --upgrade .
      - name: Install playwright dependencies for HTML tests
        run: |
          python -m playwright install chromium --with-deps
      - name: Try single CLI run of tool
        run: |
          NO_EXIT_CVE_NUM=1 python -m cve_bin_tool.cli test/assets/test-kerberos-5-1.15.1.out -n json
      - name: Run async tests
        run: >
          pytest -n 4 -v
          --ignore=test/test_cli.py
          --ignore=test/test_cvedb.py
          --ignore=test/test_requirements.py
          --ignore=test/test_html.py
      - name: Run synchronous tests
        run: >
          pytest -v
          test/test_cli.py
          test/test_cvedb.py
      - name: Run HTML tests
        run: pytest -v -n auto test/test_html.py

  long_tests:
    name: Long tests on Python 3.10
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      LONG_TESTS: 1
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Get date
        id: get-date
        run: |
          echo "date=$(/bin/date -u "+%Y%m%d")" >> $GITHUB_OUTPUT
      - name: Get cached database
        uses: actions/cache@v3
        with:
          path: ~/.cache/cve-bin-tool
          key: ${{ runner.os }}-cve-bin-tool-${{ steps.get-date.outputs.date }}
      - uses: technote-space/get-diff-action@v6
        with:
          PATTERNS: |
            cve_bin_tool/checkers/*.py
            test/condensed-downloads/*
          FILES: |
            cvedb.py
            test_scanner.py
            test_cli.py
            cli.py
      - uses: haya14busa/action-cond@v1
        id: git-diff
        with:
          cond: ${{ (github.event.inputs.longTests == 'true') || (env.GIT_DIFF != '') }}
          if_true: '1'
          if_false: '0'
      - name: Install cabextract
        run: sudo apt-get update && sudo apt-get install cabextract
      - name: Install OS dependencies for testing PDF
        run: sudo apt-get install build-essential libpoppler-cpp-dev pkg-config python3-dev
      - name: Install pdftotext, reportlab and cve-bin-tool
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools
          python -m pip install --upgrade wheel
          python -m pip install --upgrade pdftotext
          python -m pip install --upgrade reportlab
          python -m pip install --upgrade -r dev-requirements.txt
          python -m pip install --editable .
      - name: Install playwright dependencies for HTML tests
        run: |
          python -m playwright install chromium --with-deps
      - name: Try single CLI run of tool
        run: |
          NO_EXIT_CVE_NUM=1 python -m cve_bin_tool.cli test/assets/test-kerberos-5-1.15.1.out -n json
      - name: Run async tests
        env:
          LONG_TESTS: ${{ steps.git-diff.outputs.value }}
        run: >
          pytest --cov --cov-append -n 4 -v
          --ignore=test/test_cli.py
          --ignore=test/test_cvedb.py
          --ignore=test/test_requirements.py
          --ignore=test/test_html.py
      - name: Run synchronous tests
        env:
          LONG_TESTS: ${{ steps.git-diff.outputs.value }}
        run: >
          pytest -v --cov --cov-append --cov-report=xml
          test/test_cli.py
          test/test_cvedb.py
      - name: Run HTML tests
        run: pytest -v -n auto test/test_html.py
      - name: Upload code coverage to codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: longtests
          name: codecov-umbrella
          fail_ci_if_error: false

  linux-mayfail:
    name: Tests which rely on external connectivity (might fail)
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      EXTERNAL_SYSTEM: 1
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Get date
        id: get-date
        run: |
          echo "date=$(/bin/date -u "+%Y%m%d")" >> $GITHUB_OUTPUT
      - name: Get cached database
        uses: actions/cache@v3
        with:
          path: ~/.cache/cve-bin-tool
          key: ${{ runner.os }}-cve-bin-tool-${{ steps.get-date.outputs.date }}
      - uses: technote-space/get-diff-action@v6
        with:
          PATTERNS: |
            cve_bin_tool/data_sources/*.py
          FILES: |
            test_available_fix.py
            test_source_osv.py
            test_source_gad.py
            test_source_nvd.py
            test_cli.py
            test_nvd_api.py
            test_cvedb.py
            test_scanner.py
            cli.py
            nvd_api.py
            cvedb.py
      - uses: haya14busa/action-cond@v1
        id: git-diff
        with:
          cond: ${{ (github.event.inputs.externalSystem == 'true') || (env.GIT_DIFF != '') }}
          if_true: '1'
          if_false: '0'
      - name: Install cve-bin-tool
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools
          python -m pip install --upgrade wheel
          python -m pip install --upgrade -r dev-requirements.txt
          python -m pip install --editable .
      - name: Try single CLI run of tool
        run: |
          NO_EXIT_CVE_NUM=1 python -m cve_bin_tool.cli test/assets/test-kerberos-5-1.15.1.out -n json
      - name: Run all tests which rely on external connectivity
        env:
          EXTERNAL_SYSTEM: ${{ steps.git-diff.outputs.value }}
        run: >
          pytest -v
          test/test_source_osv.py
          test/test_source_gad.py
          test/test_source_nvd.py
          test/test_nvd_api.py
          test/test_cvedb.py
          test/test_available_fix.py

  windows_tests:
    name: Windows tests
    runs-on: windows-latest
    timeout-minutes: 45
    env:
      NO_EXIT_CVE_NUM: 1
      PYTHONIOENCODING: 'utf8'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Get date
        id: get-date
        run: |
          echo "DATE=$(powershell get-date -format "yyyyMMdd")" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
      - name: Get cached database
        uses: actions/cache@v3
        with:
          path: ~/.cache/cve-bin-tool
          key: ${{ runner.os }}-cve-bin-tool-${{ steps.get-date.outputs.DATE }}
      - name: Install cve-bin-tool
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools
          python -m pip install --upgrade wheel
          python -m pip install --upgrade -r dev-requirements.txt
          python -m pip install --upgrade .
      - name: Install playwright dependencies for HTML tests
        run: |
          python -m playwright install chromium --with-deps
      - name: Try single CLI run of tool
        run: |
          python -m cve_bin_tool.cli test/assets/test-kerberos-5-1.15.1.out -n json
      - name: Run async tests
        run: >
          pytest -n 4 -v
          --ignore=test/test_cli.py
          --ignore=test/test_cvedb.py
          --ignore=test/test_requirements.py
          --ignore=test/test_html.py
      - name: Run synchronous tests
        run: >
          pytest -v
          test/test_cli.py
          test/test_cvedb.py
      - name: Run HTML tests
        run: pytest -v -n auto test/test_html.py
      - name: Cache conda
        uses: actions/cache@v3
        env:
          # Increase to reset cache if requirements.txt file has not changed
          CACHE_NUMBER: 0
        with:
          path: ~/conda_pkgs_dir
          key: ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{
            hashFiles('requirements.txt') }}
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          activate-environment: pdftotext
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
      - name: Install pdftotext, reportlab and cve-bin-tool
        run: |
          conda install -c conda-forge python=3.10 poppler pdftotext
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools
          python -m pip install --upgrade wheel
          python -m pip install --upgrade reportlab
          python -m pip install --upgrade -r dev-requirements.txt
          python -m pip install --upgrade .
      - name: Test PDF generation on Windows
        run: pytest test/test_output_engine.py -k test_output_pdf

  windows_long_tests:
    name: Windows long tests
    runs-on: windows-latest
    timeout-minutes: 50
    env:
      LONG_TESTS: 1
      NO_EXIT_CVE_NUM: 1
      PYTHONIOENCODING: 'utf8'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      - name: Get date
        id: get-date
        run: |
          echo "DATE=$(powershell get-date -format "yyyyMMdd")" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
      - name: Get cached database
        uses: actions/cache@v3
        with:
          path: ~/.cache/cve-bin-tool
          key: ${{ runner.os }}-cve-bin-tool-${{ steps.get-date.outputs.DATE }}
      - name: Install cve-bin-tool
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools
          python -m pip install --upgrade wheel
          python -m pip install --upgrade -r dev-requirements.txt
          python -m pip install --upgrade .
      - name: Install playwright dependencies for HTML tests
        run: |
          python -m playwright install chromium --with-deps
      - name: Try single CLI run of tool
        run: |
          python -m cve_bin_tool.cli test/assets/test-kerberos-5-1.15.1.out -n json
      - name: Run async tests
        run: >
          pytest --cov --cov-append -n 4 -v
          --ignore=test/test_cli.py
          --ignore=test/test_cvedb.py
          --ignore=test/test_requirements.py
          --ignore=test/test_html.py
      - name: Run synchronous tests
        run: >
          pytest -v --cov --cov-append --cov-report=xml
          test/test_cli.py
          test/test_cvedb.py
      - name: Run HTML tests
        run: pytest -v -n auto test/test_html.py
      - name: Cache conda
        uses: actions/cache@v3
        env:
          # Increase to reset cache if requirements.txt file has not changed
          CACHE_NUMBER: 0
        with:
          path: ~/conda_pkgs_dir
          key: ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{
            hashFiles('requirements.txt') }}
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          activate-environment: pdftotext
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
      - name: Install pdftotext, reportlab and cve-bin-tool
        run: |
          conda install -c conda-forge python=3.9 poppler pdftotext
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools
          python -m pip install --upgrade wheel
          python -m pip install --upgrade reportlab
          python -m pip install --upgrade -r dev-requirements.txt
          python -m pip install --upgrade .
      - name: Test PDF generation on Windows
        run: pytest test/test_output_engine.py -k test_output_pdf --cov --cov-append --cov-report=xml
      - name: Upload code coverage to codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: win-longtests
          name: codecov-umbrella
          fail_ci_if_error: false
