# Copyright (C) 2021 Intel Corporation
# SPDX-License-Identifier: GPL-3.0-or-later

from os.path import dirname, join

import pytest

from cve_bin_tool.error_handler import ErrorMode
from cve_bin_tool.package_list_parser import (
    EmptyTxtError,
    NotTxtError,
    PackageListParser,
    Remarks,
)
from cve_bin_tool.util import ProductInfo


class TestPackageListParser:
    TXT_PATH = join(dirname(__file__), "txt")

    PARSED_TRIAGE_DATA = {
        ProductInfo("plot", "plotly", "4.14.3"): {
            "default": {"comments": "", "remarks": Remarks.Unexplored, "severity": ""},
            "paths": {""},
        },
        ProductInfo("pocoo", "jinja2", "2.11.3"): {
            "default": {"comments": "", "remarks": Remarks.Unexplored, "severity": ""},
            "paths": {""},
        },
        ProductInfo("aiohttp_project", "aiohttp", "3.7.4.post0"): {
            "default": {"comments": "", "remarks": Remarks.Unexplored, "severity": ""},
            "paths": {""},
        },
        ProductInfo("pyyaml", "pyyaml", "5.4.1"): {
            "default": {"comments": "", "remarks": Remarks.Unexplored, "severity": ""},
            "paths": {""},
        },
        ProductInfo("reportlab", "reportlab", "3.5.66"): {
            "default": {
                "comments": "",
                "remarks": Remarks.Confirmed,
                "remarks": Remarks.Unexplored,
                "severity": "",
            },
            "paths": {""},
        },
    }

    @pytest.mark.parametrize("filepath", [join(TXT_PATH, "nonexistent.txt")])
    def test_nonexistent_txt(self, filepath):
        package_list = PackageListParser(filepath, error_mode=ErrorMode.FullTrace)
        with pytest.raises(FileNotFoundError):
            package_list.parse_list()

    @pytest.mark.parametrize(
        "filepath, exception", [(join(TXT_PATH, "empty.txt"), EmptyTxtError)]
    )
    def test_empty_txt(self, filepath, exception):
        package_list = PackageListParser(filepath, error_mode=ErrorMode.FullTrace)
        with pytest.raises(exception):
            package_list.parse_list()

    @pytest.mark.parametrize(
        "filepath, exception", [(join(TXT_PATH, "not_txt.csv"), NotTxtError)]
    )
    def test_not_txt(self, filepath, exception):
        package_list = PackageListParser(filepath, error_mode=ErrorMode.FullTrace)
        with pytest.raises(exception):
            package_list.parse_list()

    @pytest.mark.parametrize(
        "filepath, parsed_data",
        [(join(TXT_PATH, "test_requirements.txt"), PARSED_TRIAGE_DATA)],
    )
    def test_valid_txt(self, filepath, parsed_data):
        package_list = PackageListParser(filepath, error_mode=ErrorMode.FullTrace)
        assert dict(package_list.parse_list()) == parsed_data
