# Copyright (C) 2021 Intel Corporation
# SPDX-License-Identifier: GPL-3.0-or-later

import subprocess
from os.path import dirname, join

import pytest

from cve_bin_tool.error_handler import ErrorMode
from cve_bin_tool.package_list_parser import (
    EmptyTxtError,
    NotTxtError,
    PackageListParser,
    Remarks,
)
from cve_bin_tool.util import ProductInfo, ProductInfoWithoutVendor


class TestPackageListParser:
    TXT_PATH = join(dirname(__file__), "txt")

    PARSED_TRIAGE_DATA = [
        {
            ProductInfo(
                vendor="httplib2_project", product="httplib2", version="0.18.1"
            ): {
                "default": {
                    "remarks": Remarks.Unexplored,
                    "comments": "",
                    "severity": "",
                },
                "paths": {""},
            },
            ProductInfo(vendor="python", product="requests", version="2.25.1"): {
                "default": {
                    "remarks": Remarks.Unexplored,
                    "comments": "",
                    "severity": "",
                },
                "paths": {""},
            },
        },
        {
            ProductInfoWithoutVendor(product="html5lib", version="0.99"): {
                "default": {
                    "remarks": Remarks.Unexplored,
                    "comments": "",
                    "severity": "",
                },
                "paths": {""},
            },
        },
    ]

    @pytest.mark.parametrize("filepath", [join(TXT_PATH, "nonexistent.txt")])
    def test_nonexistent_txt(self, filepath):
        package_list = PackageListParser(filepath, error_mode=ErrorMode.FullTrace)
        with pytest.raises(FileNotFoundError):
            package_list.parse_list()

    @pytest.mark.parametrize(
        "filepath, exception", [(join(TXT_PATH, "empty.txt"), EmptyTxtError)]
    )
    def test_empty_txt(self, filepath, exception):
        package_list = PackageListParser(filepath, error_mode=ErrorMode.FullTrace)
        with pytest.raises(exception):
            package_list.parse_list()

    @pytest.mark.parametrize(
        "filepath, exception", [(join(TXT_PATH, "not_txt.csv"), NotTxtError)]
    )
    def test_not_txt(self, filepath, exception):
        package_list = PackageListParser(filepath, error_mode=ErrorMode.FullTrace)
        with pytest.raises(exception):
            package_list.parse_list()

    @pytest.mark.parametrize(
        "filepath, parsed_data",
        [(join(TXT_PATH, "test_requirements.txt"), PARSED_TRIAGE_DATA)],
    )
    def test_valid_txt(self, filepath, parsed_data):
        # packages is installed from test_requirements with specific versions for the test to pass
        subprocess.run(["pip", "install", "-r", filepath])
        package_list = PackageListParser(filepath, error_mode=ErrorMode.FullTrace)
        assert package_list.parse_list() == parsed_data
