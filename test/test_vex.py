# Copyright (C) 2021 Intel Corporation
# SPDX-License-Identifier: GPL-3.0-or-later
import json
import unittest
from pathlib import Path

from cve_bin_tool.util import CVE, CVEData, ProductInfo, Remarks
from cve_bin_tool.vex_manager.generate import VEXGenerate

TEST_DIR = Path(__file__).parent.resolve()
VEX_PATH = TEST_DIR / "vex"


class TestVexGeneration(unittest.TestCase):
    FORMATTED_DATA = {
        ProductInfo("vendor0", "product0", "1.0", "/usr/local/bin/product"): CVEData(
            cves=[
                CVE(
                    "CVE-1234-1004",
                    "CRITICAL",
                    score=4.2,
                    cvss_version=2,
                    cvss_vector="C:H",
                    data_source="NVD",
                    last_modified="01-05-2019",
                    metric={
                        "EPSS": [0.00126, "0.46387"],
                    },
                ),
                CVE(
                    "CVE-1234-1005",
                    "MEDIUM",
                    remarks=Remarks.NotAffected,
                    comments="Detail field populated.",
                    score=4.2,
                    cvss_version=2,
                    cvss_vector="C:H",
                    data_source="NVD",
                    last_modified="01-05-2019",
                    metric={
                        "EPSS": [0.00126, "0.46387"],
                    },
                    justification="code_not_reachable",
                    response=["will_not_fix"],
                ),
            ],
            paths={""},
        ),
        ProductInfo("vendor0", "product0", "2.8.6", "/usr/local/bin/product"): CVEData(
            cves=[
                CVE(
                    "CVE-1234-1007",
                    "LOW",
                    remarks=Remarks.Mitigated,
                    comments="Data field populated.",
                    score=2.5,
                    cvss_version=3,
                    cvss_vector="CVSS3.0/C:H/I:L/A:M",
                    data_source="NVD",
                    last_modified="12-12-2020",
                    metric={
                        "EPSS": [0.03895, "0.37350"],
                    },
                ),
                CVE(
                    "CVE-1234-1008",
                    "UNKNOWN",
                    score=2.5,
                    cvss_version=3,
                    cvss_vector="CVSS3.0/C:H/I:L/A:M",
                    data_source="NVD",
                    last_modified="12-12-2020",
                    metric={
                        "EPSS": [0.03895, "0.37350"],
                    },
                ),
            ],
            paths={""},
        ),
    }

    def test_output_cyclonedx(self):
        """Test VEX output generation"""

        vexgen = VEXGenerate(
            "dummy-product",
            "1.0",
            "dummy-vendor",
            "generated_cyclonedx_vex.json",
            "cyclonedx",
            self.FORMATTED_DATA,
        )
        vexgen.generate_vex()
        with open("generated_cyclonedx_vex.json") as f:
            json_data = json.load(f)
            # remove timestamp and serialNumber from generated json as they are dynamic
            json_data.get("metadata", {}).pop("timestamp", None)
            json_data.pop("serialNumber", None)
            for vulnerability in json_data.get("vulnerabilities", []):
                vulnerability.pop("published", None)
                vulnerability.pop("updated", None)

        with open(str(VEX_PATH / "test_cyclonedx_vex.json")) as f:
            expected_json = json.load(f)
            # remove timestamp and serialNumber from expected json as they are dynamic
            expected_json.get("metadata", {}).pop("timestamp", None)
            expected_json.pop("serialNumber", None)
            for vulnerability in expected_json.get("vulnerabilities", []):
                vulnerability.pop("published", None)
                vulnerability.pop("updated", None)

        assert json_data == expected_json

        Path("generated_cyclonedx_vex.json").unlink()


if __name__ == "__main__":
    unittest.main()
