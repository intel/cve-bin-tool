# Copyright (C) 2021 Anthony Harrison
# SPDX-License-Identifier: GPL-3.0-or-later

from pathlib import Path

import pytest

from cve_bin_tool.util import ProductInfo
from cve_bin_tool.version_scanner import VersionScanner


class TestLanguageScanner:
    TEST_FILE_PATH = Path(__file__).parent.resolve() / "language_data"

    JAVASCRIPT_PRODUCTS = [
        "cache",
        "core",
        "http-client",
        "generator",
        "expect",
        "yargs-parser",
    ]

    RUST_PRODUCTS = [
        "bumpalo",
        "cranelift-codegen",
        "crossbeam-channel",
        "digest",
        "generic-array",
        "hex",
        "libc",
        "linked-hash-map",
        "lock_api",
        "memoffset",
        "nix",
        "once_cell",
        "openssl",
        "paste",
        "phf",
        "quote",
        "rand",
        "rand_core",
        "regex",
        "serde_cbor",
        "sha2",
        "smallvec",
        "socket2",
        "time",
        "yaml-rust",
    ]

    @pytest.mark.parametrize(
        "filename, product_name",
        (((str(TEST_FILE_PATH / "pom.xml")), "commons_io"),),
    )
    def test_java_package(self, filename: str, product_name: str) -> None:
        scanner = VersionScanner()
        scanner.file_stack.append(filename)
        # Only expecting to get one product with a vendor in the database
        for product in scanner.scan_file(filename):
            if product:
                product_info, file_path = product
        assert product_info.product == product_name
        assert file_path == filename

    @pytest.mark.parametrize("filename", ((str(TEST_FILE_PATH / "fail_pom.xml")),))
    def test_java_package_none_found(self, filename: str) -> None:
        scanner = VersionScanner()
        scanner.file_stack.append(filename)
        product = None
        # Not expecting any product to match with a vendor in the database
        for product in scanner.scan_file(filename):
            pass
        assert product is None

    @pytest.mark.parametrize("filename", ((str(TEST_FILE_PATH / "package-lock.json")),))
    def test_javascript_package(self, filename: str) -> None:
        scanner = VersionScanner()
        scanner.file_stack.append(filename)
        found_product = []
        for product in scanner.scan_file(filename):
            if product:
                product_info, file_path = product
                if product_info.product not in found_product:
                    found_product.append(product_info.product)
        assert found_product == self.JAVASCRIPT_PRODUCTS
        assert file_path == filename

    @pytest.mark.parametrize(
        "filename", ((str(TEST_FILE_PATH / "fail-package-lock.json")),)
    )
    def test_javascript_package_none_found(self, filename: str) -> None:
        scanner = VersionScanner()
        scanner.file_stack.append(filename)
        product = None
        # Not expecting any product to match with a vendor in the database
        for product in scanner.scan_file(filename):
            pass
        assert product is not None

    @pytest.mark.parametrize("filename", ((str(TEST_FILE_PATH / "Cargo.lock")),))
    def test_rust_package(self, filename: str) -> None:
        scanner = VersionScanner()
        scanner.file_stack.append(filename)
        found_product = []
        for product in scanner.scan_file(filename):
            if product:
                product_info, file_path = product
                if product_info.product not in found_product:
                    found_product.append(product_info.product)
        assert found_product == self.RUST_PRODUCTS
        assert file_path == filename

    @pytest.mark.parametrize("filename", ((str(TEST_FILE_PATH / "PKG-INFO")),))
    def test_python_package(self, filename: str) -> None:
        scanner = VersionScanner()
        scanner.file_stack.append(filename)
        for product in scanner.scan_file(filename):
            if product:
                product_info, file_path = product
        assert product_info == ProductInfo("facebook", "zstandard", "0.18.0")
        assert file_path == filename

    @pytest.mark.parametrize("filename", ((str(TEST_FILE_PATH / "FAIL-PKG-INFO")),))
    def test_python_package_none_found(self, filename: str) -> None:
        scanner = VersionScanner()
        scanner.file_stack.append(filename)
        product = None
        # Not expecting any product to match with a vendor in the database
        for product in scanner.scan_file(filename):
            pass
        assert product is None
