# Copyright (C) 2021 Intel Corporation
# SPDX-License-Identifier: GPL-3.0-or-later

import shutil
import tempfile
from datetime import datetime, timedelta

import aiohttp
import pytest
from bs4 import BeautifulSoup

from cve_bin_tool.cvedb import CVEDB
from cve_bin_tool.nvd_api import NVD_API


class TestNVD_API:
    @classmethod
    def setup_class(cls):
        cls.outdir = tempfile.mkdtemp(prefix="cvedb-api-")

    @classmethod
    def teardown_class(cls):
        shutil.rmtree(cls.outdir)

    @pytest.mark.asyncio
    async def test_get_nvd_params(self):
        """Test NVD for a future date. It should be empty"""
        nvd_api = NVD_API(outdir=self.outdir)
        await nvd_api.get_nvd_params(
            time_of_last_update=(datetime.now() + timedelta(days=1))
        )
        assert nvd_api.total_results == 0 and nvd_api.year_wise_data == []

    @pytest.mark.asyncio
    async def test_total_results_count(self):
        """Total results should be greater than or equal to the current fetched cves"""
        nvd_api = NVD_API(outdir=self.outdir)
        await nvd_api.get_nvd_params(
            time_of_last_update=datetime.now() - timedelta(days=2)
        )
        assert len(nvd_api.year_wise_data) >= nvd_api.total_results

    @pytest.mark.asyncio
    async def test_nvd_incremental_update(self):
        """Test to check whether we are able to fetch and save the nvd cache"""
        nvd_api = NVD_API(outdir=self.outdir)
        await nvd_api.get_nvd_params(
            time_of_last_update=datetime.now() - timedelta(days=4)
        )
        await nvd_api.get()
        cvedb = CVEDB(cachedir=nvd_api.outdir)
        cvedb.init_database()
        cvedb.populate_db()
        cvedb.check_cve_entries()
        assert cvedb.cve_count == nvd_api.total_results

    @pytest.mark.asyncio
    async def test_empty_nvd_result(self):
        """Test to check nvd results non-empty result. Total result should be greater than 0"""
        nvd_api = NVD_API(outdir=self.outdir)
        await nvd_api.get_nvd_params()
        assert nvd_api.total_results > 0

    @pytest.mark.asyncio
    @pytest.mark.skip(reason="Test is broken")
    async def test_api_cve_count(self):
        """Test to match the totalResults and the total CVE count on NVD """

        connector = aiohttp.TCPConnector()
        async with aiohttp.ClientSession(
            connector=connector, trust_env=True
        ) as session:

            async with await session.get(
                "https://nvd.nist.gov/general/nvd-dashboard"
            ) as response:
                # Fetch the total CVE count from the NVD page
                response.raise_for_status()
                html = await response.text()
                soup = BeautifulSoup(html, "html.parser")
                table = soup.find("table", id="tableNvdCounts")
                nvd_contains = table.select("tr:nth-of-type(1) > td:nth-of-type(2)")
                nvd_contains = int(nvd_contains[0].string)

            received_cves = 0
            rejected_cves = 0

            async with await session.get(
                "https://nvd.nist.gov/rest/public/dashboard/statistics?reporttype=countsbystatus"
            ) as response:
                # Fetch the rejected and received CVE count from NVD
                response.raise_for_status()
                data = await response.json()
                for key in data["vulnsByStatusCounts"]:
                    if key["name"] == "Rejected":
                        rejected_cves = int(key["count"])
                    elif key["name"] == "Received":
                        received_cves = int(key["count"])

        nvd_api = NVD_API(outdir=self.outdir)
        await nvd_api.get_nvd_params()

        assert (
            abs(nvd_api.total_results - (nvd_contains - rejected_cves)) <= received_cves
        )
