"""
CVE-bin-tool OutputEngine tests
"""
import unittest
import io
import json
import xml.etree.ElementTree as ElementTree

from cve_bin_tool.OutputEngine import OutputEngine


class TestOutputEngine(unittest.TestCase):
    """ Test the OutputEngine class functions """

    MOCK_MODULES = {
        "modulename0": {
            "1.0": {"CVE-1234-1234": "MEDIUM", "CVE-1234-9876": "LOW",},
            "2.8.6": {"CVE-1234-1111": "LOW",},
        },
        "modulename1": {"3.2.1.0": {"CVE-1234-5678": "HIGH",}},
    }
    FORMATTED_MODULES = {
        "modulename0": {
            "1.0": [
                {"cve": "CVE-1234-1234", "severity": "MEDIUM"},
                {"cve": "CVE-1234-9876", "severity": "LOW"},
            ],
            "2.8.6": [{"cve": "CVE-1234-1111", "severity": "LOW"},],
        },
        "modulename1": {"3.2.1.0": [{"cve": "CVE-1234-5678", "severity": "HIGH"},]},
    }

    def setUp(self):
        self.output_engine = OutputEngine(modules=self.MOCK_MODULES)
        self.mock_file = io.StringIO()

    def test_formatted_modules(self):
        """ Test reformatting modules """
        self.assertEqual(self.output_engine.formatted_modules(), self.FORMATTED_MODULES)

    def test_output_json(self):
        """ Test formatting output as JSON """
        self.output_engine.output_json(self.mock_file)
        self.mock_file.seek(0)  # reset file position
        self.assertEqual(json.load(self.mock_file), self.FORMATTED_MODULES)

    def test_output_xml(self):
        """ Test formatting output as XML """
        self.output_engine.output_xml(self.mock_file)
        self.mock_file.seek(0)  # reset file position
        parsed = ElementTree.parse(self.mock_file)
        extracted = {}
        # parse XML outselves to rebuild module information
        for module in parsed.getroot():
            extracted[module.attrib["name"]] = {}
            for version in module:
                version_cves = extracted[module.attrib["name"]][
                    version.attrib["version"]
                ] = {}
                for cve in version:
                    version_cves[cve.attrib["number"]] = cve.attrib["severity"]
        self.assertEqual(extracted, self.MOCK_MODULES)
