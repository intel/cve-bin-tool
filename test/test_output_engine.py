"""
CVE-bin-tool OutputEngine tests
"""
import unittest
import io
import json
import csv
import sys

from cve_bin_tool.OutputEngine import OutputEngine


class TestOutputEngine(unittest.TestCase):
    """ Test the OutputEngine class functions """

    MOCK_MODULES = {
        "modulename0": {
            "1.0": {"CVE-1234-1234": "MEDIUM", "CVE-1234-9876": "LOW",},
            "2.8.6": {"CVE-1234-1111": "LOW",},
        },
        "modulename1": {"3.2.1.0": {"CVE-1234-5678": "HIGH",}},
    }
    FORMATTED_MODULES = {
        "modulename0": {
            "1.0": [
                {"cve": "CVE-1234-1234", "severity": "MEDIUM"},
                {"cve": "CVE-1234-9876", "severity": "LOW"},
            ],
            "2.8.6": [{"cve": "CVE-1234-1111", "severity": "LOW"},],
        },
        "modulename1": {"3.2.1.0": [{"cve": "CVE-1234-5678", "severity": "HIGH"},]},
    }

    def setUp(self):
        self.output_engine = OutputEngine(modules=self.MOCK_MODULES)
        self.mock_file = io.StringIO()

    def test_formatted_modules(self):
        """ Test reformatting modules """
        self.assertEqual(self.output_engine.formatted_modules(), self.FORMATTED_MODULES)

    def test_output_json(self):
        """ Test formatting output as JSON """
        self.output_engine.output_json(self.mock_file)
        self.mock_file.seek(0)  # reset file position
        self.assertEqual(json.load(self.mock_file), self.FORMATTED_MODULES)

    def test_output_csv(self):
        """ Test formatting output as CSV """
        self.output_engine.output_csv(self.mock_file)
        self.mock_file.seek(0)  # reset file position
        reader = csv.reader(self.mock_file)
        next(reader)  # sip first line (header)
        # read CSV file and convert ourselves
        read_modules = {}
        for modulename, version, cve_number, severity in reader:
            if modulename not in read_modules:
                read_modules[modulename] = {}
            if version not in read_modules[modulename]:
                read_modules[modulename][version] = {}
            read_modules[modulename][version][cve_number] = severity
        self.assertEqual(read_modules, self.MOCK_MODULES)

    def test_output_console(self):
        """Test Formatting Output as console"""

        # list of mock modules having length greater than the current Respective Max Length
        mock_module_names = [
            "ABCDEFGHIJKLMNOPQRS",
            "ABCDEFGHIJKLMNOPQR",
            "ABCDEFGHIJKLMNOPQ",
            "ABCDEFGHIJKLMNOP",
            "ABCDEFGHIJKLMNO",
            "ABCDEFGHIJKLMN",
            "glibc",
            "I'm a different module",
        ]

        # generate output
        for name in mock_module_names:
            self.output_engine.write_console(
                name, "0.0.1", "CVE-2018-12381", "HIGH", self.mock_file
            )

        # expected output
        output_modules = """| ABCDEFGHIJKLMNO... | 0.0.1     | CVE-2018-12381     | HIGH      |
+--------------------+-----------+--------------------+-----------+
| ABCDEFGHIJKLMNO... | 0.0.1     | CVE-2018-12381     | HIGH      |
+--------------------+-----------+--------------------+-----------+
| ABCDEFGHIJKLMNO... | 0.0.1     | CVE-2018-12381     | HIGH      |
+--------------------+-----------+--------------------+-----------+
| ABCDEFGHIJKLMNO... | 0.0.1     | CVE-2018-12381     | HIGH      |
+--------------------+-----------+--------------------+-----------+
| ABCDEFGHIJKLMNO    | 0.0.1     | CVE-2018-12381     | HIGH      |
+--------------------+-----------+--------------------+-----------+
| ABCDEFGHIJKLMN     | 0.0.1     | CVE-2018-12381     | HIGH      |
+--------------------+-----------+--------------------+-----------+
| glibc              | 0.0.1     | CVE-2018-12381     | HIGH      |
+--------------------+-----------+--------------------+-----------+
| I'm a different... | 0.0.1     | CVE-2018-12381     | HIGH      |
+--------------------+-----------+--------------------+-----------+
"""
        self.mock_file.seek(0)  # reset file position

        output = self.mock_file.getvalue().split("\n")
        for i, line in enumerate(output_modules.split("\n")):
            with self.subTest(i=i):
                self.assertEqual(line, output[i])
