"""
csv2cve tests
"""

import os
import sys
import unittest
from cve_bin_tool.csv2cve import CSV2CVE, main


class TestCsv2cve(unittest.TestCase):
    """
    Runs tests for the csv2cve helper tool
    """

    @classmethod
    def setUp(self):
        self.CSV_PATH = os.path.join(os.path.abspath(os.path.dirname(__file__)), "csv")

    def test_bad_csv(self):
        """ Test a empty csv file (should fail) """
        csv2cve = CSV2CVE(filename=os.path.join(self.CSV_PATH, "bad.csv"))
        output = csv2cve.generate_modules()
        self.assertEqual(-1, output)

    def test_bad_vendor(self):
        """ Test a csv file with a bad vendor column (should fail) """
        csv2cve = CSV2CVE(filename=os.path.join(self.CSV_PATH, "bad_vendor.csv"))
        output = csv2cve.generate_modules()
        self.assertEqual(-2, output)

    def test_bad_product(self):
        """ Test a csv file with a bad product column (should fail) """
        csv2cve = CSV2CVE(filename=os.path.join(self.CSV_PATH, "bad_product.csv"))
        output = csv2cve.generate_modules()
        self.assertEqual(-2, output)

    def test_bad_version(self):
        """ Test a csv file with a bad version column (should fail) """
        csv2cve = CSV2CVE(filename=os.path.join(self.CSV_PATH, "bad_version.csv"))
        output = csv2cve.generate_modules()
        self.assertEqual(-2, output)

    def test_bad_filename(self):
        """ Test a csv with bad filename (should fail)"""
        csv2cve = CSV2CVE(filename="I'm not a good path")
        output = csv2cve.generate_modules()
        self.assertEqual(-3, output)

    def test_sample_csv(self):
        csv2cve = CSV2CVE(filename=os.path.join(self.CSV_PATH, "test.csv"))
        output = csv2cve.generate_modules()
        expected = {
            "libjpeg-turbo": {
                "2.0.1": {"CVE-2018-19664": "MEDIUM", "CVE-2018-20330": "HIGH"}
            },
            "curl": {
                "7.59.0": {
                    "CVE-2018-0500": "CRITICAL",
                    "CVE-2018-1000300": "CRITICAL",
                    "CVE-2018-1000301": "CRITICAL",
                    "CVE-2018-14618": "CRITICAL",
                    "CVE-2018-16839": "CRITICAL",
                    "CVE-2018-16840": "CRITICAL",
                    "CVE-2018-16842": "CRITICAL",
                    "CVE-2018-16890": "HIGH",
                    "CVE-2019-3822": "CRITICAL",
                    "CVE-2019-3823": "HIGH",
                    "CVE-2019-5436": "HIGH",
                    "CVE-2019-5443": "HIGH",
                    "CVE-2019-5481": "CRITICAL",
                    "CVE-2019-5482": "CRITICAL",
                }
            },
            "libcurl": {
                "7.59.0": {
                    "CVE-2018-14618": "CRITICAL",
                    "CVE-2018-16890": "HIGH",
                    "CVE-2019-3822": "CRITICAL",
                    "CVE-2019-3823": "HIGH",
                    "CVE-2019-5436": "HIGH",
                }
            },
            "no": {"7.7": {"UNKOWN": "UNKOWN"}},
        }
        self.assertEqual(expected, output)

    def test_main(self):
        """ Test running main. Likely needs to be expanded. """
        returncode = main(["csv2cve"])
        self.assertEqual(0, returncode)
