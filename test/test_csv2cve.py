"""
csv2cve tests
TODO: This won't be necessary after I write test cases for input_engine.
 I am going to make a separate PR for this since I don't want to block
 Harmandeep.
"""
#
# import os
# import unittest
#
# from cve_bin_tool.csv2cve import main
#
#
# class TestCsv2cve(unittest.TestCase):
#     """
#     Runs tests for the csv2cve helper tool
#     """
#     CSV_PATH = os.path.join(os.path.abspath(os.path.dirname(__file__)), "csv")
#
#     def test_bad_csv(self):
#         """ Test a empty csv file (should fail) """
#         csv2cve = CSV2CVE(
#             self.cve_scanner, filename=os.path.join(self.CSV_PATH, "bad.csv")
#         )
#         output = csv2cve.get_cves()
#         self.assertEqual(-1, output)
#
#     def test_bad_vendor(self):
#         """ Test a csv file with a bad vendor column (should fail) """
#         csv2cve = CSV2CVE(
#             self.cve_scanner, filename=os.path.join(self.CSV_PATH, "bad_vendor.csv")
#         )
#         output = csv2cve.get_cves()
#         self.assertEqual(-2, output)
#
#     def test_bad_product(self):
#         """ Test a csv file with a bad product column (should fail) """
#         csv2cve = CSV2CVE(
#             self.cve_scanner, filename=os.path.join(self.CSV_PATH, "bad_product.csv")
#         )
#         output = csv2cve.get_cves()
#         self.assertEqual(-2, output)
#
#     def test_bad_version(self):
#         """ Test a csv file with a bad version column (should fail) """
#         csv2cve = CSV2CVE(
#             self.cve_scanner, filename=os.path.join(self.CSV_PATH, "bad_version.csv")
#         )
#         output = csv2cve.get_cves()
#         self.assertEqual(-2, output)
#
#     def test_bad_filename(self):
#         """ Test a csv with bad filename (should fail)"""
#         csv2cve = CSV2CVE(self.cve_scanner, filename="I'm not a good path")
#         output = csv2cve.get_cves()
#         self.assertEqual(-3, output)
#
#     def test_sample_csv(self):
#         """ Test a good sample CSV file (also contains false products)"""
#         csv2cve = CSV2CVE(
#             self.cve_scanner, filename=os.path.join(self.CSV_PATH, "test.csv")
#         )
#         output = csv2cve.get_cves()
#
#         # Generate List CVEs for Testing
#         for product in output:
#             if product.product == "libjpeg-turbo" and product.version == "2.0.1":
#                 pro_libjpeg = [cve.cve_number for cve in product.cves]
#             elif product.product == "curl" and product.version == "7.59.0":
#                 pro_curl = [cve.cve_number for cve in product.cves]
#             elif product.product == "libcurl" and product.version == "7.59.0":
#                 pro_libcurl = [cve.cve_number for cve in product.cves]
#             elif product.product == "no" and product.version == "7.7":
#                 pro_unknown = [cve.cve_number for cve in product.cves]
#
#         # Assert the CVE in ListCVEs
#         self.assertIn("CVE-2018-19664", pro_libjpeg)
#         self.assertIn("CVE-2018-16839", pro_curl)
#         self.assertIn("CVE-2018-16890", pro_libcurl)
#         self.assertIn("UNKNOWN", pro_unknown)
#
#     def test_main(self):
#         """ Test running main. Likely needs to be expanded. """
#         returncode = main(["csv2cve"])
#         self.assertEqual(0, returncode)
