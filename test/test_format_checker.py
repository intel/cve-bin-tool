# Copyright (C) 2022 Intel Corporation
# SPDX-License-Identifier: GPL-3.0-or-later

"""
CVE-bin-tool Format Checker tests
"""
import os
import re
from os.path import dirname, join
from unittest.mock import call, mock_open, patch

import pytest

import cve_bin_tool.format_checkers as format_checkers


class TestFormatCheckers:
    """Tests the CVE Bin Tool Format Checkers Script"""

    @classmethod
    def setup_class(cls):
        cls.mock_path_dir = join(dirname(__file__), "format_checkers")
        cls.mock_checkers = [
            "libssh2",
            "polarssl_fedora",
            "radare2",
            "rsyslog",
            "open_vm_tools",
            "libssh2",
            "polarssl_fedora",
            "busybox",
            "commons_compress",
            "bzip2",
        ]
        cls.mock_checkers.sort()

    @pytest.mark.asyncio
    async def test_update_allowed_words(self):
        """Tests the update_allowed_words function"""
        file_path = os.path.join(self.mock_path_dir, "allow.txt")

        with patch("cve_bin_tool.format_checkers.open", mock_open()) as mocked_file:
            format_checkers.update_allowed_words(
                checkers_array=self.mock_checkers, file_path=file_path
            )

            words = re.findall(r"[^0-9_]+", "_".join(self.mock_checkers))
            words = list(set(words))
            words = sorted(words, key=str.casefold)

            # assert if opened file twice, once in read mode 'r' and once in write mode 'w'
            mocked_file.assert_has_calls(
                [call(file_path), call(file_path, "w+")],
                any_order=True,
            )

            # assert if writelines was called from the file opened
            mocked_file().writelines.assert_called_once_with("\n".join(words))
