#!python

import pytest
import pkg_resources


class TestCheckers:
    """Run a series of tests directly against individual checkers.
    This is a companion to the tests in TestScanner."""

    @pytest.mark.parametrize(
        "checker_name, file_name, expected_result",
        [
            ("binutils", "dlltool", "binutils"),
            ("bluez", "libbluetooth.so.4", "bluetoothctl"),
            ("bzip2", "bzip2.so", "bzip2"),
            ("cups", "cupsd.so", "cups"),
            ("curl", "libcurl.so.4", "curl"),
            ("expat", "libexpat.so", "expat"),
            ("ffmpeg", "libffmpeg.so", "ffmpeg"),
            ("gnutls_cli", "libgnutls.so", "gnutls-cli"),
            ("gnutls_serv", "gnutls-serv", "gnutls-serv"),
            ("gstreamer", "libgstreamer.so", "gstreamer"),
            ("hostapd", "hostapd.so", "hostapd"),
            (
                "icu",
                "international_components_for_unicode.o",
                "international_components_for_unicode",
            ),
            ("libcurl", "libcurl.so.2.0", "curl"),
            ("libdb", "libdb-2.0.so", "libdb"),
            ("libgcrypt", "libgcrypt.so.1.0", "libgcrypt"),
            ("libjpeg", "libjpg.so.2.0", "libjpeg-turbo"),
            ("libnss", "libnss.so.1.0", "nss"),
            ("libtiff", "libtiff.so.1.0", "tiff"),
            ("lighttpd", "lighttpd", "lighttpd")
            # ("openssh", "scp", "openssh-client"),
            # ("openssh", "sftp", "openssh-client"),
            # ("openssh", "ssh", "openssh-client"),
            # ("openssh", "ssh-add", "openssh-client"),
            # ("openssh", "ssh-agent", "openssh-client"),
            # ("openssh", "ssh-argv0", "openssh-client"),
            # ("openssh", "ssh-copy-id", "openssh-client"),
            # ("openssh", "ssh-keygen", "openssh-client"),
            # ("openssh", "ssh-keyscan", "openssh-client"),
            # ("openssh", "slogin", "openssh-client"),
            # ("openssh", "sshd", "openssh-server"),
            # ("python", "python", "python"),
            # ("python", "python2.7", "python"),
            # ("python", "python3.8", "python"),
            # ("ncurses", "libncurses.so", "ncurses"),
            # ("python", "python3.9", "python"),
        ],
    )
    def test_filename_is(self, checker_name, file_name, expected_result):
        """ Test a checker's filename detection"""
        checkers = pkg_resources.iter_entry_points("cve_bin_tool.checker")
        for checker in checkers:
            if checker.name == checker_name:
                Checker = checker.load()
                checker = Checker()

                result = checker.get_version([""], file_name)
                assert result["is_or_contains"] == "is"
                assert result["modulename"] == expected_result
