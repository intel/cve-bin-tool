# Copyright (C) 2021 Intel Corporation
# SPDX-License-Identifier: GPL-3.0-or-later

# Script to add versions to requirements.csv

import csv
import os
import re
from importlib.metadata import version

REQ_CSV = os.path.abspath(os.path.join(os.path.dirname(__file__), "requirements.csv"))
DOC_CSV = os.path.abspath(
    os.path.join(os.path.dirname(__file__), "doc", "requirements.csv")
)
CACHE_CSV = os.path.join(
    os.path.expanduser("~"), ".cache", "cve-bin-tool", "requirements.csv"
)
HTML_DEP_PATH = os.path.abspath(
    os.path.join(
        os.path.dirname(__file__), "cve_bin_tool", "output_engine", "html_reports", "js"
    )
)
HTML_DEP_CSV = os.path.join(HTML_DEP_PATH, "dependencies.csv")


def get_cache_csv_data(file):
    data = []
    with open(file, "r") as f:
        r = csv.reader(f)
        next(r)
        for row in r:
            if file is HTML_DEP_CSV:
                file_name = (
                    "{}/{}".format(HTML_DEP_PATH, row[1])
                    if ".js" in row[1]
                    else "{}/{}.js".format(HTML_DEP_PATH, row[1])
                )
                with open(file_name) as f:
                    file_content = f.read()
                    html_dep_version = re.search(
                        r"v([0-9]+\.[0-9]+\.[0-9]+)", file_content
                    ).group(1)
                    data.append((row[0], row[1], html_dep_version))
            else:
                if "_not_in_db" not in row[0]:
                    data.append((row[0], row[1], version(row[1])))
        return data


cache_csv_data = (
    get_cache_csv_data(REQ_CSV)
    + get_cache_csv_data(DOC_CSV)
    + get_cache_csv_data(HTML_DEP_CSV)
)

# writes a cache CSV file
with open(CACHE_CSV, "w") as f:
    writer = csv.writer(f)
    fieldnames = ["vendor", "product", "version"]
    writer = csv.writer(f)
    writer.writerow(fieldnames)
    for row in cache_csv_data:
        writer.writerow(row)
